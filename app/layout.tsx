import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { Providers } from "@/components/providers";
import { Toaster } from "@/components/ui/sonner";
import { cookies, headers } from "next/headers";
import { ReactNode } from "react";
import { getAuthenticatedAppForUser } from "@/lib/server-auth";
import { User } from "@firebase/auth";
import { redirect } from "next/navigation";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Super Geheime App",
  description: "Generated by create next app",
};

type Props = {
  children: ReactNode;
};

export default async function RootLayout({ children }: Props) {
  const h = await headers();
  const lng = h.get("x-locale");
  const pathname = h.get("x-pathname");

  const { currentUser } = await getAuthenticatedAppForUser();

  console.log(currentUser, pathname);

  if (!currentUser && pathname !== "/auth/login") {
    redirect("/auth/login");
  }

  if (pathname === "/auth/login" && currentUser) {
    redirect("/");
  }

  const orgId = (await cookies()).get("__org")?.value;

  if (!orgId && pathname !== "/auth/org") {
    redirect("/auth/org");
  }

  return (
    <html lang={lng ?? "en"}>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        suppressHydrationWarning
      >
        <Providers initialUser={currentUser?.toJSON() as User}>
          {children}
        </Providers>
        <Toaster />
      </body>
    </html>
  );
}
