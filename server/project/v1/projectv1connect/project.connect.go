// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: project/v1/project.proto

package projectv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/maxischmaxi/ljtime-api/project/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProjectServiceName is the fully-qualified name of the ProjectService service.
	ProjectServiceName = "project.v1.ProjectService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProjectServiceGetProjectProcedure is the fully-qualified name of the ProjectService's GetProject
	// RPC.
	ProjectServiceGetProjectProcedure = "/project.v1.ProjectService/GetProject"
	// ProjectServiceCreateProjectProcedure is the fully-qualified name of the ProjectService's
	// CreateProject RPC.
	ProjectServiceCreateProjectProcedure = "/project.v1.ProjectService/CreateProject"
	// ProjectServiceUpdateProjectProcedure is the fully-qualified name of the ProjectService's
	// UpdateProject RPC.
	ProjectServiceUpdateProjectProcedure = "/project.v1.ProjectService/UpdateProject"
	// ProjectServiceDeleteProjectProcedure is the fully-qualified name of the ProjectService's
	// DeleteProject RPC.
	ProjectServiceDeleteProjectProcedure = "/project.v1.ProjectService/DeleteProject"
	// ProjectServiceGetProjectsProcedure is the fully-qualified name of the ProjectService's
	// GetProjects RPC.
	ProjectServiceGetProjectsProcedure = "/project.v1.ProjectService/GetProjects"
	// ProjectServiceGetProjectsByCustomerProcedure is the fully-qualified name of the ProjectService's
	// GetProjectsByCustomer RPC.
	ProjectServiceGetProjectsByCustomerProcedure = "/project.v1.ProjectService/GetProjectsByCustomer"
	// ProjectServiceGetProjectsByOrgProcedure is the fully-qualified name of the ProjectService's
	// GetProjectsByOrg RPC.
	ProjectServiceGetProjectsByOrgProcedure = "/project.v1.ProjectService/GetProjectsByOrg"
	// ProjectServiceGetJobsByProjectProcedure is the fully-qualified name of the ProjectService's
	// GetJobsByProject RPC.
	ProjectServiceGetJobsByProjectProcedure = "/project.v1.ProjectService/GetJobsByProject"
	// ProjectServiceGetJobsByCustomerProcedure is the fully-qualified name of the ProjectService's
	// GetJobsByCustomer RPC.
	ProjectServiceGetJobsByCustomerProcedure = "/project.v1.ProjectService/GetJobsByCustomer"
	// ProjectServiceGetJobsByDateProcedure is the fully-qualified name of the ProjectService's
	// GetJobsByDate RPC.
	ProjectServiceGetJobsByDateProcedure = "/project.v1.ProjectService/GetJobsByDate"
	// ProjectServiceGetJobProcedure is the fully-qualified name of the ProjectService's GetJob RPC.
	ProjectServiceGetJobProcedure = "/project.v1.ProjectService/GetJob"
	// ProjectServiceCreateJobProcedure is the fully-qualified name of the ProjectService's CreateJob
	// RPC.
	ProjectServiceCreateJobProcedure = "/project.v1.ProjectService/CreateJob"
	// ProjectServiceUpdateJobProcedure is the fully-qualified name of the ProjectService's UpdateJob
	// RPC.
	ProjectServiceUpdateJobProcedure = "/project.v1.ProjectService/UpdateJob"
	// ProjectServiceDeleteJobProcedure is the fully-qualified name of the ProjectService's DeleteJob
	// RPC.
	ProjectServiceDeleteJobProcedure = "/project.v1.ProjectService/DeleteJob"
	// ProjectServiceUpdateProjectTypeProcedure is the fully-qualified name of the ProjectService's
	// UpdateProjectType RPC.
	ProjectServiceUpdateProjectTypeProcedure = "/project.v1.ProjectService/UpdateProjectType"
)

// ProjectServiceClient is a client for the project.v1.ProjectService service.
type ProjectServiceClient interface {
	GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error)
	CreateProject(context.Context, *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error)
	UpdateProject(context.Context, *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.UpdateProjectResponse], error)
	DeleteProject(context.Context, *connect.Request[v1.DeleteProjectRequest]) (*connect.Response[v1.DeleteProjectResponse], error)
	GetProjects(context.Context, *connect.Request[v1.GetProjectsRequest]) (*connect.Response[v1.GetProjectsResponse], error)
	GetProjectsByCustomer(context.Context, *connect.Request[v1.GetProjectsByCustomerRequest]) (*connect.Response[v1.GetProjectsByCustomerResponse], error)
	GetProjectsByOrg(context.Context, *connect.Request[v1.GetProjectsByOrgRequest]) (*connect.Response[v1.GetProjectsByOrgResponse], error)
	GetJobsByProject(context.Context, *connect.Request[v1.GetJobsByProjectRequest]) (*connect.Response[v1.GetJobsByProjectResponse], error)
	GetJobsByCustomer(context.Context, *connect.Request[v1.GetJobsByCustomerRequest]) (*connect.Response[v1.GetJobsByCustomerResponse], error)
	GetJobsByDate(context.Context, *connect.Request[v1.GetJobsByDateRequest]) (*connect.Response[v1.GetJobsByDateResponse], error)
	GetJob(context.Context, *connect.Request[v1.GetJobRequest]) (*connect.Response[v1.GetJobResponse], error)
	CreateJob(context.Context, *connect.Request[v1.CreateJobRequest]) (*connect.Response[v1.CreateJobResponse], error)
	UpdateJob(context.Context, *connect.Request[v1.UpdateJobRequest]) (*connect.Response[v1.UpdateJobResponse], error)
	DeleteJob(context.Context, *connect.Request[v1.DeleteJobRequest]) (*connect.Response[v1.DeleteJobResponse], error)
	UpdateProjectType(context.Context, *connect.Request[v1.UpdateProjectTypeRequest]) (*connect.Response[v1.UpdateProjectTypeResponse], error)
}

// NewProjectServiceClient constructs a client for the project.v1.ProjectService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProjectServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProjectServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	projectServiceMethods := v1.File_project_v1_project_proto.Services().ByName("ProjectService").Methods()
	return &projectServiceClient{
		getProject: connect.NewClient[v1.GetProjectRequest, v1.GetProjectResponse](
			httpClient,
			baseURL+ProjectServiceGetProjectProcedure,
			connect.WithSchema(projectServiceMethods.ByName("GetProject")),
			connect.WithClientOptions(opts...),
		),
		createProject: connect.NewClient[v1.CreateProjectRequest, v1.CreateProjectResponse](
			httpClient,
			baseURL+ProjectServiceCreateProjectProcedure,
			connect.WithSchema(projectServiceMethods.ByName("CreateProject")),
			connect.WithClientOptions(opts...),
		),
		updateProject: connect.NewClient[v1.UpdateProjectRequest, v1.UpdateProjectResponse](
			httpClient,
			baseURL+ProjectServiceUpdateProjectProcedure,
			connect.WithSchema(projectServiceMethods.ByName("UpdateProject")),
			connect.WithClientOptions(opts...),
		),
		deleteProject: connect.NewClient[v1.DeleteProjectRequest, v1.DeleteProjectResponse](
			httpClient,
			baseURL+ProjectServiceDeleteProjectProcedure,
			connect.WithSchema(projectServiceMethods.ByName("DeleteProject")),
			connect.WithClientOptions(opts...),
		),
		getProjects: connect.NewClient[v1.GetProjectsRequest, v1.GetProjectsResponse](
			httpClient,
			baseURL+ProjectServiceGetProjectsProcedure,
			connect.WithSchema(projectServiceMethods.ByName("GetProjects")),
			connect.WithClientOptions(opts...),
		),
		getProjectsByCustomer: connect.NewClient[v1.GetProjectsByCustomerRequest, v1.GetProjectsByCustomerResponse](
			httpClient,
			baseURL+ProjectServiceGetProjectsByCustomerProcedure,
			connect.WithSchema(projectServiceMethods.ByName("GetProjectsByCustomer")),
			connect.WithClientOptions(opts...),
		),
		getProjectsByOrg: connect.NewClient[v1.GetProjectsByOrgRequest, v1.GetProjectsByOrgResponse](
			httpClient,
			baseURL+ProjectServiceGetProjectsByOrgProcedure,
			connect.WithSchema(projectServiceMethods.ByName("GetProjectsByOrg")),
			connect.WithClientOptions(opts...),
		),
		getJobsByProject: connect.NewClient[v1.GetJobsByProjectRequest, v1.GetJobsByProjectResponse](
			httpClient,
			baseURL+ProjectServiceGetJobsByProjectProcedure,
			connect.WithSchema(projectServiceMethods.ByName("GetJobsByProject")),
			connect.WithClientOptions(opts...),
		),
		getJobsByCustomer: connect.NewClient[v1.GetJobsByCustomerRequest, v1.GetJobsByCustomerResponse](
			httpClient,
			baseURL+ProjectServiceGetJobsByCustomerProcedure,
			connect.WithSchema(projectServiceMethods.ByName("GetJobsByCustomer")),
			connect.WithClientOptions(opts...),
		),
		getJobsByDate: connect.NewClient[v1.GetJobsByDateRequest, v1.GetJobsByDateResponse](
			httpClient,
			baseURL+ProjectServiceGetJobsByDateProcedure,
			connect.WithSchema(projectServiceMethods.ByName("GetJobsByDate")),
			connect.WithClientOptions(opts...),
		),
		getJob: connect.NewClient[v1.GetJobRequest, v1.GetJobResponse](
			httpClient,
			baseURL+ProjectServiceGetJobProcedure,
			connect.WithSchema(projectServiceMethods.ByName("GetJob")),
			connect.WithClientOptions(opts...),
		),
		createJob: connect.NewClient[v1.CreateJobRequest, v1.CreateJobResponse](
			httpClient,
			baseURL+ProjectServiceCreateJobProcedure,
			connect.WithSchema(projectServiceMethods.ByName("CreateJob")),
			connect.WithClientOptions(opts...),
		),
		updateJob: connect.NewClient[v1.UpdateJobRequest, v1.UpdateJobResponse](
			httpClient,
			baseURL+ProjectServiceUpdateJobProcedure,
			connect.WithSchema(projectServiceMethods.ByName("UpdateJob")),
			connect.WithClientOptions(opts...),
		),
		deleteJob: connect.NewClient[v1.DeleteJobRequest, v1.DeleteJobResponse](
			httpClient,
			baseURL+ProjectServiceDeleteJobProcedure,
			connect.WithSchema(projectServiceMethods.ByName("DeleteJob")),
			connect.WithClientOptions(opts...),
		),
		updateProjectType: connect.NewClient[v1.UpdateProjectTypeRequest, v1.UpdateProjectTypeResponse](
			httpClient,
			baseURL+ProjectServiceUpdateProjectTypeProcedure,
			connect.WithSchema(projectServiceMethods.ByName("UpdateProjectType")),
			connect.WithClientOptions(opts...),
		),
	}
}

// projectServiceClient implements ProjectServiceClient.
type projectServiceClient struct {
	getProject            *connect.Client[v1.GetProjectRequest, v1.GetProjectResponse]
	createProject         *connect.Client[v1.CreateProjectRequest, v1.CreateProjectResponse]
	updateProject         *connect.Client[v1.UpdateProjectRequest, v1.UpdateProjectResponse]
	deleteProject         *connect.Client[v1.DeleteProjectRequest, v1.DeleteProjectResponse]
	getProjects           *connect.Client[v1.GetProjectsRequest, v1.GetProjectsResponse]
	getProjectsByCustomer *connect.Client[v1.GetProjectsByCustomerRequest, v1.GetProjectsByCustomerResponse]
	getProjectsByOrg      *connect.Client[v1.GetProjectsByOrgRequest, v1.GetProjectsByOrgResponse]
	getJobsByProject      *connect.Client[v1.GetJobsByProjectRequest, v1.GetJobsByProjectResponse]
	getJobsByCustomer     *connect.Client[v1.GetJobsByCustomerRequest, v1.GetJobsByCustomerResponse]
	getJobsByDate         *connect.Client[v1.GetJobsByDateRequest, v1.GetJobsByDateResponse]
	getJob                *connect.Client[v1.GetJobRequest, v1.GetJobResponse]
	createJob             *connect.Client[v1.CreateJobRequest, v1.CreateJobResponse]
	updateJob             *connect.Client[v1.UpdateJobRequest, v1.UpdateJobResponse]
	deleteJob             *connect.Client[v1.DeleteJobRequest, v1.DeleteJobResponse]
	updateProjectType     *connect.Client[v1.UpdateProjectTypeRequest, v1.UpdateProjectTypeResponse]
}

// GetProject calls project.v1.ProjectService.GetProject.
func (c *projectServiceClient) GetProject(ctx context.Context, req *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error) {
	return c.getProject.CallUnary(ctx, req)
}

// CreateProject calls project.v1.ProjectService.CreateProject.
func (c *projectServiceClient) CreateProject(ctx context.Context, req *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error) {
	return c.createProject.CallUnary(ctx, req)
}

// UpdateProject calls project.v1.ProjectService.UpdateProject.
func (c *projectServiceClient) UpdateProject(ctx context.Context, req *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.UpdateProjectResponse], error) {
	return c.updateProject.CallUnary(ctx, req)
}

// DeleteProject calls project.v1.ProjectService.DeleteProject.
func (c *projectServiceClient) DeleteProject(ctx context.Context, req *connect.Request[v1.DeleteProjectRequest]) (*connect.Response[v1.DeleteProjectResponse], error) {
	return c.deleteProject.CallUnary(ctx, req)
}

// GetProjects calls project.v1.ProjectService.GetProjects.
func (c *projectServiceClient) GetProjects(ctx context.Context, req *connect.Request[v1.GetProjectsRequest]) (*connect.Response[v1.GetProjectsResponse], error) {
	return c.getProjects.CallUnary(ctx, req)
}

// GetProjectsByCustomer calls project.v1.ProjectService.GetProjectsByCustomer.
func (c *projectServiceClient) GetProjectsByCustomer(ctx context.Context, req *connect.Request[v1.GetProjectsByCustomerRequest]) (*connect.Response[v1.GetProjectsByCustomerResponse], error) {
	return c.getProjectsByCustomer.CallUnary(ctx, req)
}

// GetProjectsByOrg calls project.v1.ProjectService.GetProjectsByOrg.
func (c *projectServiceClient) GetProjectsByOrg(ctx context.Context, req *connect.Request[v1.GetProjectsByOrgRequest]) (*connect.Response[v1.GetProjectsByOrgResponse], error) {
	return c.getProjectsByOrg.CallUnary(ctx, req)
}

// GetJobsByProject calls project.v1.ProjectService.GetJobsByProject.
func (c *projectServiceClient) GetJobsByProject(ctx context.Context, req *connect.Request[v1.GetJobsByProjectRequest]) (*connect.Response[v1.GetJobsByProjectResponse], error) {
	return c.getJobsByProject.CallUnary(ctx, req)
}

// GetJobsByCustomer calls project.v1.ProjectService.GetJobsByCustomer.
func (c *projectServiceClient) GetJobsByCustomer(ctx context.Context, req *connect.Request[v1.GetJobsByCustomerRequest]) (*connect.Response[v1.GetJobsByCustomerResponse], error) {
	return c.getJobsByCustomer.CallUnary(ctx, req)
}

// GetJobsByDate calls project.v1.ProjectService.GetJobsByDate.
func (c *projectServiceClient) GetJobsByDate(ctx context.Context, req *connect.Request[v1.GetJobsByDateRequest]) (*connect.Response[v1.GetJobsByDateResponse], error) {
	return c.getJobsByDate.CallUnary(ctx, req)
}

// GetJob calls project.v1.ProjectService.GetJob.
func (c *projectServiceClient) GetJob(ctx context.Context, req *connect.Request[v1.GetJobRequest]) (*connect.Response[v1.GetJobResponse], error) {
	return c.getJob.CallUnary(ctx, req)
}

// CreateJob calls project.v1.ProjectService.CreateJob.
func (c *projectServiceClient) CreateJob(ctx context.Context, req *connect.Request[v1.CreateJobRequest]) (*connect.Response[v1.CreateJobResponse], error) {
	return c.createJob.CallUnary(ctx, req)
}

// UpdateJob calls project.v1.ProjectService.UpdateJob.
func (c *projectServiceClient) UpdateJob(ctx context.Context, req *connect.Request[v1.UpdateJobRequest]) (*connect.Response[v1.UpdateJobResponse], error) {
	return c.updateJob.CallUnary(ctx, req)
}

// DeleteJob calls project.v1.ProjectService.DeleteJob.
func (c *projectServiceClient) DeleteJob(ctx context.Context, req *connect.Request[v1.DeleteJobRequest]) (*connect.Response[v1.DeleteJobResponse], error) {
	return c.deleteJob.CallUnary(ctx, req)
}

// UpdateProjectType calls project.v1.ProjectService.UpdateProjectType.
func (c *projectServiceClient) UpdateProjectType(ctx context.Context, req *connect.Request[v1.UpdateProjectTypeRequest]) (*connect.Response[v1.UpdateProjectTypeResponse], error) {
	return c.updateProjectType.CallUnary(ctx, req)
}

// ProjectServiceHandler is an implementation of the project.v1.ProjectService service.
type ProjectServiceHandler interface {
	GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error)
	CreateProject(context.Context, *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error)
	UpdateProject(context.Context, *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.UpdateProjectResponse], error)
	DeleteProject(context.Context, *connect.Request[v1.DeleteProjectRequest]) (*connect.Response[v1.DeleteProjectResponse], error)
	GetProjects(context.Context, *connect.Request[v1.GetProjectsRequest]) (*connect.Response[v1.GetProjectsResponse], error)
	GetProjectsByCustomer(context.Context, *connect.Request[v1.GetProjectsByCustomerRequest]) (*connect.Response[v1.GetProjectsByCustomerResponse], error)
	GetProjectsByOrg(context.Context, *connect.Request[v1.GetProjectsByOrgRequest]) (*connect.Response[v1.GetProjectsByOrgResponse], error)
	GetJobsByProject(context.Context, *connect.Request[v1.GetJobsByProjectRequest]) (*connect.Response[v1.GetJobsByProjectResponse], error)
	GetJobsByCustomer(context.Context, *connect.Request[v1.GetJobsByCustomerRequest]) (*connect.Response[v1.GetJobsByCustomerResponse], error)
	GetJobsByDate(context.Context, *connect.Request[v1.GetJobsByDateRequest]) (*connect.Response[v1.GetJobsByDateResponse], error)
	GetJob(context.Context, *connect.Request[v1.GetJobRequest]) (*connect.Response[v1.GetJobResponse], error)
	CreateJob(context.Context, *connect.Request[v1.CreateJobRequest]) (*connect.Response[v1.CreateJobResponse], error)
	UpdateJob(context.Context, *connect.Request[v1.UpdateJobRequest]) (*connect.Response[v1.UpdateJobResponse], error)
	DeleteJob(context.Context, *connect.Request[v1.DeleteJobRequest]) (*connect.Response[v1.DeleteJobResponse], error)
	UpdateProjectType(context.Context, *connect.Request[v1.UpdateProjectTypeRequest]) (*connect.Response[v1.UpdateProjectTypeResponse], error)
}

// NewProjectServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProjectServiceHandler(svc ProjectServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	projectServiceMethods := v1.File_project_v1_project_proto.Services().ByName("ProjectService").Methods()
	projectServiceGetProjectHandler := connect.NewUnaryHandler(
		ProjectServiceGetProjectProcedure,
		svc.GetProject,
		connect.WithSchema(projectServiceMethods.ByName("GetProject")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceCreateProjectHandler := connect.NewUnaryHandler(
		ProjectServiceCreateProjectProcedure,
		svc.CreateProject,
		connect.WithSchema(projectServiceMethods.ByName("CreateProject")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceUpdateProjectHandler := connect.NewUnaryHandler(
		ProjectServiceUpdateProjectProcedure,
		svc.UpdateProject,
		connect.WithSchema(projectServiceMethods.ByName("UpdateProject")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceDeleteProjectHandler := connect.NewUnaryHandler(
		ProjectServiceDeleteProjectProcedure,
		svc.DeleteProject,
		connect.WithSchema(projectServiceMethods.ByName("DeleteProject")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceGetProjectsHandler := connect.NewUnaryHandler(
		ProjectServiceGetProjectsProcedure,
		svc.GetProjects,
		connect.WithSchema(projectServiceMethods.ByName("GetProjects")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceGetProjectsByCustomerHandler := connect.NewUnaryHandler(
		ProjectServiceGetProjectsByCustomerProcedure,
		svc.GetProjectsByCustomer,
		connect.WithSchema(projectServiceMethods.ByName("GetProjectsByCustomer")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceGetProjectsByOrgHandler := connect.NewUnaryHandler(
		ProjectServiceGetProjectsByOrgProcedure,
		svc.GetProjectsByOrg,
		connect.WithSchema(projectServiceMethods.ByName("GetProjectsByOrg")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceGetJobsByProjectHandler := connect.NewUnaryHandler(
		ProjectServiceGetJobsByProjectProcedure,
		svc.GetJobsByProject,
		connect.WithSchema(projectServiceMethods.ByName("GetJobsByProject")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceGetJobsByCustomerHandler := connect.NewUnaryHandler(
		ProjectServiceGetJobsByCustomerProcedure,
		svc.GetJobsByCustomer,
		connect.WithSchema(projectServiceMethods.ByName("GetJobsByCustomer")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceGetJobsByDateHandler := connect.NewUnaryHandler(
		ProjectServiceGetJobsByDateProcedure,
		svc.GetJobsByDate,
		connect.WithSchema(projectServiceMethods.ByName("GetJobsByDate")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceGetJobHandler := connect.NewUnaryHandler(
		ProjectServiceGetJobProcedure,
		svc.GetJob,
		connect.WithSchema(projectServiceMethods.ByName("GetJob")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceCreateJobHandler := connect.NewUnaryHandler(
		ProjectServiceCreateJobProcedure,
		svc.CreateJob,
		connect.WithSchema(projectServiceMethods.ByName("CreateJob")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceUpdateJobHandler := connect.NewUnaryHandler(
		ProjectServiceUpdateJobProcedure,
		svc.UpdateJob,
		connect.WithSchema(projectServiceMethods.ByName("UpdateJob")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceDeleteJobHandler := connect.NewUnaryHandler(
		ProjectServiceDeleteJobProcedure,
		svc.DeleteJob,
		connect.WithSchema(projectServiceMethods.ByName("DeleteJob")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceUpdateProjectTypeHandler := connect.NewUnaryHandler(
		ProjectServiceUpdateProjectTypeProcedure,
		svc.UpdateProjectType,
		connect.WithSchema(projectServiceMethods.ByName("UpdateProjectType")),
		connect.WithHandlerOptions(opts...),
	)
	return "/project.v1.ProjectService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProjectServiceGetProjectProcedure:
			projectServiceGetProjectHandler.ServeHTTP(w, r)
		case ProjectServiceCreateProjectProcedure:
			projectServiceCreateProjectHandler.ServeHTTP(w, r)
		case ProjectServiceUpdateProjectProcedure:
			projectServiceUpdateProjectHandler.ServeHTTP(w, r)
		case ProjectServiceDeleteProjectProcedure:
			projectServiceDeleteProjectHandler.ServeHTTP(w, r)
		case ProjectServiceGetProjectsProcedure:
			projectServiceGetProjectsHandler.ServeHTTP(w, r)
		case ProjectServiceGetProjectsByCustomerProcedure:
			projectServiceGetProjectsByCustomerHandler.ServeHTTP(w, r)
		case ProjectServiceGetProjectsByOrgProcedure:
			projectServiceGetProjectsByOrgHandler.ServeHTTP(w, r)
		case ProjectServiceGetJobsByProjectProcedure:
			projectServiceGetJobsByProjectHandler.ServeHTTP(w, r)
		case ProjectServiceGetJobsByCustomerProcedure:
			projectServiceGetJobsByCustomerHandler.ServeHTTP(w, r)
		case ProjectServiceGetJobsByDateProcedure:
			projectServiceGetJobsByDateHandler.ServeHTTP(w, r)
		case ProjectServiceGetJobProcedure:
			projectServiceGetJobHandler.ServeHTTP(w, r)
		case ProjectServiceCreateJobProcedure:
			projectServiceCreateJobHandler.ServeHTTP(w, r)
		case ProjectServiceUpdateJobProcedure:
			projectServiceUpdateJobHandler.ServeHTTP(w, r)
		case ProjectServiceDeleteJobProcedure:
			projectServiceDeleteJobHandler.ServeHTTP(w, r)
		case ProjectServiceUpdateProjectTypeProcedure:
			projectServiceUpdateProjectTypeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProjectServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProjectServiceHandler struct{}

func (UnimplementedProjectServiceHandler) GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("project.v1.ProjectService.GetProject is not implemented"))
}

func (UnimplementedProjectServiceHandler) CreateProject(context.Context, *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("project.v1.ProjectService.CreateProject is not implemented"))
}

func (UnimplementedProjectServiceHandler) UpdateProject(context.Context, *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.UpdateProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("project.v1.ProjectService.UpdateProject is not implemented"))
}

func (UnimplementedProjectServiceHandler) DeleteProject(context.Context, *connect.Request[v1.DeleteProjectRequest]) (*connect.Response[v1.DeleteProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("project.v1.ProjectService.DeleteProject is not implemented"))
}

func (UnimplementedProjectServiceHandler) GetProjects(context.Context, *connect.Request[v1.GetProjectsRequest]) (*connect.Response[v1.GetProjectsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("project.v1.ProjectService.GetProjects is not implemented"))
}

func (UnimplementedProjectServiceHandler) GetProjectsByCustomer(context.Context, *connect.Request[v1.GetProjectsByCustomerRequest]) (*connect.Response[v1.GetProjectsByCustomerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("project.v1.ProjectService.GetProjectsByCustomer is not implemented"))
}

func (UnimplementedProjectServiceHandler) GetProjectsByOrg(context.Context, *connect.Request[v1.GetProjectsByOrgRequest]) (*connect.Response[v1.GetProjectsByOrgResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("project.v1.ProjectService.GetProjectsByOrg is not implemented"))
}

func (UnimplementedProjectServiceHandler) GetJobsByProject(context.Context, *connect.Request[v1.GetJobsByProjectRequest]) (*connect.Response[v1.GetJobsByProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("project.v1.ProjectService.GetJobsByProject is not implemented"))
}

func (UnimplementedProjectServiceHandler) GetJobsByCustomer(context.Context, *connect.Request[v1.GetJobsByCustomerRequest]) (*connect.Response[v1.GetJobsByCustomerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("project.v1.ProjectService.GetJobsByCustomer is not implemented"))
}

func (UnimplementedProjectServiceHandler) GetJobsByDate(context.Context, *connect.Request[v1.GetJobsByDateRequest]) (*connect.Response[v1.GetJobsByDateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("project.v1.ProjectService.GetJobsByDate is not implemented"))
}

func (UnimplementedProjectServiceHandler) GetJob(context.Context, *connect.Request[v1.GetJobRequest]) (*connect.Response[v1.GetJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("project.v1.ProjectService.GetJob is not implemented"))
}

func (UnimplementedProjectServiceHandler) CreateJob(context.Context, *connect.Request[v1.CreateJobRequest]) (*connect.Response[v1.CreateJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("project.v1.ProjectService.CreateJob is not implemented"))
}

func (UnimplementedProjectServiceHandler) UpdateJob(context.Context, *connect.Request[v1.UpdateJobRequest]) (*connect.Response[v1.UpdateJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("project.v1.ProjectService.UpdateJob is not implemented"))
}

func (UnimplementedProjectServiceHandler) DeleteJob(context.Context, *connect.Request[v1.DeleteJobRequest]) (*connect.Response[v1.DeleteJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("project.v1.ProjectService.DeleteJob is not implemented"))
}

func (UnimplementedProjectServiceHandler) UpdateProjectType(context.Context, *connect.Request[v1.UpdateProjectTypeRequest]) (*connect.Response[v1.UpdateProjectTypeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("project.v1.ProjectService.UpdateProjectType is not implemented"))
}
