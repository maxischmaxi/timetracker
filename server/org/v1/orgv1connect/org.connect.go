// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: org/v1/org.proto

package orgv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/maxischmaxi/ljtime-api/org/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OrgServiceName is the fully-qualified name of the OrgService service.
	OrgServiceName = "org.v1.OrgService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OrgServiceGetOrgProcedure is the fully-qualified name of the OrgService's GetOrg RPC.
	OrgServiceGetOrgProcedure = "/org.v1.OrgService/GetOrg"
	// OrgServiceGetOrgByIdProcedure is the fully-qualified name of the OrgService's GetOrgById RPC.
	OrgServiceGetOrgByIdProcedure = "/org.v1.OrgService/GetOrgById"
	// OrgServiceUpdateOrgProcedure is the fully-qualified name of the OrgService's UpdateOrg RPC.
	OrgServiceUpdateOrgProcedure = "/org.v1.OrgService/UpdateOrg"
	// OrgServiceSetOrgPaymentProcedure is the fully-qualified name of the OrgService's SetOrgPayment
	// RPC.
	OrgServiceSetOrgPaymentProcedure = "/org.v1.OrgService/SetOrgPayment"
	// OrgServiceCreateOrgProcedure is the fully-qualified name of the OrgService's CreateOrg RPC.
	OrgServiceCreateOrgProcedure = "/org.v1.OrgService/CreateOrg"
	// OrgServiceDeleteOrgProcedure is the fully-qualified name of the OrgService's DeleteOrg RPC.
	OrgServiceDeleteOrgProcedure = "/org.v1.OrgService/DeleteOrg"
	// OrgServiceAddAdminToOrgProcedure is the fully-qualified name of the OrgService's AddAdminToOrg
	// RPC.
	OrgServiceAddAdminToOrgProcedure = "/org.v1.OrgService/AddAdminToOrg"
	// OrgServiceRemoveAdminFromOrgProcedure is the fully-qualified name of the OrgService's
	// RemoveAdminFromOrg RPC.
	OrgServiceRemoveAdminFromOrgProcedure = "/org.v1.OrgService/RemoveAdminFromOrg"
	// OrgServiceInviteEmailToOrgProcedure is the fully-qualified name of the OrgService's
	// InviteEmailToOrg RPC.
	OrgServiceInviteEmailToOrgProcedure = "/org.v1.OrgService/InviteEmailToOrg"
	// OrgServiceAcceptEmailInviteProcedure is the fully-qualified name of the OrgService's
	// AcceptEmailInvite RPC.
	OrgServiceAcceptEmailInviteProcedure = "/org.v1.OrgService/AcceptEmailInvite"
	// OrgServiceCreateServiceTypeProcedure is the fully-qualified name of the OrgService's
	// CreateServiceType RPC.
	OrgServiceCreateServiceTypeProcedure = "/org.v1.OrgService/CreateServiceType"
	// OrgServiceUpdateServiceTypeStatusProcedure is the fully-qualified name of the OrgService's
	// UpdateServiceTypeStatus RPC.
	OrgServiceUpdateServiceTypeStatusProcedure = "/org.v1.OrgService/UpdateServiceTypeStatus"
	// OrgServiceDeleteServiceTypeProcedure is the fully-qualified name of the OrgService's
	// DeleteServiceType RPC.
	OrgServiceDeleteServiceTypeProcedure = "/org.v1.OrgService/DeleteServiceType"
)

// OrgServiceClient is a client for the org.v1.OrgService service.
type OrgServiceClient interface {
	GetOrg(context.Context, *connect.Request[v1.GetOrgRequest]) (*connect.Response[v1.GetOrgResponse], error)
	GetOrgById(context.Context, *connect.Request[v1.GetOrgByIdRequest]) (*connect.Response[v1.GetOrgByIdResponse], error)
	UpdateOrg(context.Context, *connect.Request[v1.UpdateOrgRequest]) (*connect.Response[v1.UpdateOrgResponse], error)
	SetOrgPayment(context.Context, *connect.Request[v1.SetOrgPaymentRequest]) (*connect.Response[v1.SetOrgPaymentResponse], error)
	CreateOrg(context.Context, *connect.Request[v1.CreateOrgRequest]) (*connect.Response[v1.CreateOrgResponse], error)
	DeleteOrg(context.Context, *connect.Request[v1.DeleteOrgRequest]) (*connect.Response[v1.DeleteOrgResponse], error)
	AddAdminToOrg(context.Context, *connect.Request[v1.AddAdminToOrgRequest]) (*connect.Response[v1.AddAdminToOrgResponse], error)
	RemoveAdminFromOrg(context.Context, *connect.Request[v1.RemoveAdminFromOrgRequest]) (*connect.Response[v1.RemoveAdminFromOrgResponse], error)
	InviteEmailToOrg(context.Context, *connect.Request[v1.InviteEmailToOrgRequest]) (*connect.Response[v1.InviteEmailToOrgResponse], error)
	AcceptEmailInvite(context.Context, *connect.Request[v1.AcceptEmailInviteRequest]) (*connect.Response[v1.AcceptEmailInviteResponse], error)
	CreateServiceType(context.Context, *connect.Request[v1.CreateServiceTypeRequest]) (*connect.Response[v1.CreateServiceTypeResponse], error)
	UpdateServiceTypeStatus(context.Context, *connect.Request[v1.UpdateServiceTypeStatusRequest]) (*connect.Response[v1.UpdateServiceTypeStatusResponse], error)
	DeleteServiceType(context.Context, *connect.Request[v1.DeleteServiceTypeRequest]) (*connect.Response[v1.DeleteServiceTypeResponse], error)
}

// NewOrgServiceClient constructs a client for the org.v1.OrgService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOrgServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OrgServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	orgServiceMethods := v1.File_org_v1_org_proto.Services().ByName("OrgService").Methods()
	return &orgServiceClient{
		getOrg: connect.NewClient[v1.GetOrgRequest, v1.GetOrgResponse](
			httpClient,
			baseURL+OrgServiceGetOrgProcedure,
			connect.WithSchema(orgServiceMethods.ByName("GetOrg")),
			connect.WithClientOptions(opts...),
		),
		getOrgById: connect.NewClient[v1.GetOrgByIdRequest, v1.GetOrgByIdResponse](
			httpClient,
			baseURL+OrgServiceGetOrgByIdProcedure,
			connect.WithSchema(orgServiceMethods.ByName("GetOrgById")),
			connect.WithClientOptions(opts...),
		),
		updateOrg: connect.NewClient[v1.UpdateOrgRequest, v1.UpdateOrgResponse](
			httpClient,
			baseURL+OrgServiceUpdateOrgProcedure,
			connect.WithSchema(orgServiceMethods.ByName("UpdateOrg")),
			connect.WithClientOptions(opts...),
		),
		setOrgPayment: connect.NewClient[v1.SetOrgPaymentRequest, v1.SetOrgPaymentResponse](
			httpClient,
			baseURL+OrgServiceSetOrgPaymentProcedure,
			connect.WithSchema(orgServiceMethods.ByName("SetOrgPayment")),
			connect.WithClientOptions(opts...),
		),
		createOrg: connect.NewClient[v1.CreateOrgRequest, v1.CreateOrgResponse](
			httpClient,
			baseURL+OrgServiceCreateOrgProcedure,
			connect.WithSchema(orgServiceMethods.ByName("CreateOrg")),
			connect.WithClientOptions(opts...),
		),
		deleteOrg: connect.NewClient[v1.DeleteOrgRequest, v1.DeleteOrgResponse](
			httpClient,
			baseURL+OrgServiceDeleteOrgProcedure,
			connect.WithSchema(orgServiceMethods.ByName("DeleteOrg")),
			connect.WithClientOptions(opts...),
		),
		addAdminToOrg: connect.NewClient[v1.AddAdminToOrgRequest, v1.AddAdminToOrgResponse](
			httpClient,
			baseURL+OrgServiceAddAdminToOrgProcedure,
			connect.WithSchema(orgServiceMethods.ByName("AddAdminToOrg")),
			connect.WithClientOptions(opts...),
		),
		removeAdminFromOrg: connect.NewClient[v1.RemoveAdminFromOrgRequest, v1.RemoveAdminFromOrgResponse](
			httpClient,
			baseURL+OrgServiceRemoveAdminFromOrgProcedure,
			connect.WithSchema(orgServiceMethods.ByName("RemoveAdminFromOrg")),
			connect.WithClientOptions(opts...),
		),
		inviteEmailToOrg: connect.NewClient[v1.InviteEmailToOrgRequest, v1.InviteEmailToOrgResponse](
			httpClient,
			baseURL+OrgServiceInviteEmailToOrgProcedure,
			connect.WithSchema(orgServiceMethods.ByName("InviteEmailToOrg")),
			connect.WithClientOptions(opts...),
		),
		acceptEmailInvite: connect.NewClient[v1.AcceptEmailInviteRequest, v1.AcceptEmailInviteResponse](
			httpClient,
			baseURL+OrgServiceAcceptEmailInviteProcedure,
			connect.WithSchema(orgServiceMethods.ByName("AcceptEmailInvite")),
			connect.WithClientOptions(opts...),
		),
		createServiceType: connect.NewClient[v1.CreateServiceTypeRequest, v1.CreateServiceTypeResponse](
			httpClient,
			baseURL+OrgServiceCreateServiceTypeProcedure,
			connect.WithSchema(orgServiceMethods.ByName("CreateServiceType")),
			connect.WithClientOptions(opts...),
		),
		updateServiceTypeStatus: connect.NewClient[v1.UpdateServiceTypeStatusRequest, v1.UpdateServiceTypeStatusResponse](
			httpClient,
			baseURL+OrgServiceUpdateServiceTypeStatusProcedure,
			connect.WithSchema(orgServiceMethods.ByName("UpdateServiceTypeStatus")),
			connect.WithClientOptions(opts...),
		),
		deleteServiceType: connect.NewClient[v1.DeleteServiceTypeRequest, v1.DeleteServiceTypeResponse](
			httpClient,
			baseURL+OrgServiceDeleteServiceTypeProcedure,
			connect.WithSchema(orgServiceMethods.ByName("DeleteServiceType")),
			connect.WithClientOptions(opts...),
		),
	}
}

// orgServiceClient implements OrgServiceClient.
type orgServiceClient struct {
	getOrg                  *connect.Client[v1.GetOrgRequest, v1.GetOrgResponse]
	getOrgById              *connect.Client[v1.GetOrgByIdRequest, v1.GetOrgByIdResponse]
	updateOrg               *connect.Client[v1.UpdateOrgRequest, v1.UpdateOrgResponse]
	setOrgPayment           *connect.Client[v1.SetOrgPaymentRequest, v1.SetOrgPaymentResponse]
	createOrg               *connect.Client[v1.CreateOrgRequest, v1.CreateOrgResponse]
	deleteOrg               *connect.Client[v1.DeleteOrgRequest, v1.DeleteOrgResponse]
	addAdminToOrg           *connect.Client[v1.AddAdminToOrgRequest, v1.AddAdminToOrgResponse]
	removeAdminFromOrg      *connect.Client[v1.RemoveAdminFromOrgRequest, v1.RemoveAdminFromOrgResponse]
	inviteEmailToOrg        *connect.Client[v1.InviteEmailToOrgRequest, v1.InviteEmailToOrgResponse]
	acceptEmailInvite       *connect.Client[v1.AcceptEmailInviteRequest, v1.AcceptEmailInviteResponse]
	createServiceType       *connect.Client[v1.CreateServiceTypeRequest, v1.CreateServiceTypeResponse]
	updateServiceTypeStatus *connect.Client[v1.UpdateServiceTypeStatusRequest, v1.UpdateServiceTypeStatusResponse]
	deleteServiceType       *connect.Client[v1.DeleteServiceTypeRequest, v1.DeleteServiceTypeResponse]
}

// GetOrg calls org.v1.OrgService.GetOrg.
func (c *orgServiceClient) GetOrg(ctx context.Context, req *connect.Request[v1.GetOrgRequest]) (*connect.Response[v1.GetOrgResponse], error) {
	return c.getOrg.CallUnary(ctx, req)
}

// GetOrgById calls org.v1.OrgService.GetOrgById.
func (c *orgServiceClient) GetOrgById(ctx context.Context, req *connect.Request[v1.GetOrgByIdRequest]) (*connect.Response[v1.GetOrgByIdResponse], error) {
	return c.getOrgById.CallUnary(ctx, req)
}

// UpdateOrg calls org.v1.OrgService.UpdateOrg.
func (c *orgServiceClient) UpdateOrg(ctx context.Context, req *connect.Request[v1.UpdateOrgRequest]) (*connect.Response[v1.UpdateOrgResponse], error) {
	return c.updateOrg.CallUnary(ctx, req)
}

// SetOrgPayment calls org.v1.OrgService.SetOrgPayment.
func (c *orgServiceClient) SetOrgPayment(ctx context.Context, req *connect.Request[v1.SetOrgPaymentRequest]) (*connect.Response[v1.SetOrgPaymentResponse], error) {
	return c.setOrgPayment.CallUnary(ctx, req)
}

// CreateOrg calls org.v1.OrgService.CreateOrg.
func (c *orgServiceClient) CreateOrg(ctx context.Context, req *connect.Request[v1.CreateOrgRequest]) (*connect.Response[v1.CreateOrgResponse], error) {
	return c.createOrg.CallUnary(ctx, req)
}

// DeleteOrg calls org.v1.OrgService.DeleteOrg.
func (c *orgServiceClient) DeleteOrg(ctx context.Context, req *connect.Request[v1.DeleteOrgRequest]) (*connect.Response[v1.DeleteOrgResponse], error) {
	return c.deleteOrg.CallUnary(ctx, req)
}

// AddAdminToOrg calls org.v1.OrgService.AddAdminToOrg.
func (c *orgServiceClient) AddAdminToOrg(ctx context.Context, req *connect.Request[v1.AddAdminToOrgRequest]) (*connect.Response[v1.AddAdminToOrgResponse], error) {
	return c.addAdminToOrg.CallUnary(ctx, req)
}

// RemoveAdminFromOrg calls org.v1.OrgService.RemoveAdminFromOrg.
func (c *orgServiceClient) RemoveAdminFromOrg(ctx context.Context, req *connect.Request[v1.RemoveAdminFromOrgRequest]) (*connect.Response[v1.RemoveAdminFromOrgResponse], error) {
	return c.removeAdminFromOrg.CallUnary(ctx, req)
}

// InviteEmailToOrg calls org.v1.OrgService.InviteEmailToOrg.
func (c *orgServiceClient) InviteEmailToOrg(ctx context.Context, req *connect.Request[v1.InviteEmailToOrgRequest]) (*connect.Response[v1.InviteEmailToOrgResponse], error) {
	return c.inviteEmailToOrg.CallUnary(ctx, req)
}

// AcceptEmailInvite calls org.v1.OrgService.AcceptEmailInvite.
func (c *orgServiceClient) AcceptEmailInvite(ctx context.Context, req *connect.Request[v1.AcceptEmailInviteRequest]) (*connect.Response[v1.AcceptEmailInviteResponse], error) {
	return c.acceptEmailInvite.CallUnary(ctx, req)
}

// CreateServiceType calls org.v1.OrgService.CreateServiceType.
func (c *orgServiceClient) CreateServiceType(ctx context.Context, req *connect.Request[v1.CreateServiceTypeRequest]) (*connect.Response[v1.CreateServiceTypeResponse], error) {
	return c.createServiceType.CallUnary(ctx, req)
}

// UpdateServiceTypeStatus calls org.v1.OrgService.UpdateServiceTypeStatus.
func (c *orgServiceClient) UpdateServiceTypeStatus(ctx context.Context, req *connect.Request[v1.UpdateServiceTypeStatusRequest]) (*connect.Response[v1.UpdateServiceTypeStatusResponse], error) {
	return c.updateServiceTypeStatus.CallUnary(ctx, req)
}

// DeleteServiceType calls org.v1.OrgService.DeleteServiceType.
func (c *orgServiceClient) DeleteServiceType(ctx context.Context, req *connect.Request[v1.DeleteServiceTypeRequest]) (*connect.Response[v1.DeleteServiceTypeResponse], error) {
	return c.deleteServiceType.CallUnary(ctx, req)
}

// OrgServiceHandler is an implementation of the org.v1.OrgService service.
type OrgServiceHandler interface {
	GetOrg(context.Context, *connect.Request[v1.GetOrgRequest]) (*connect.Response[v1.GetOrgResponse], error)
	GetOrgById(context.Context, *connect.Request[v1.GetOrgByIdRequest]) (*connect.Response[v1.GetOrgByIdResponse], error)
	UpdateOrg(context.Context, *connect.Request[v1.UpdateOrgRequest]) (*connect.Response[v1.UpdateOrgResponse], error)
	SetOrgPayment(context.Context, *connect.Request[v1.SetOrgPaymentRequest]) (*connect.Response[v1.SetOrgPaymentResponse], error)
	CreateOrg(context.Context, *connect.Request[v1.CreateOrgRequest]) (*connect.Response[v1.CreateOrgResponse], error)
	DeleteOrg(context.Context, *connect.Request[v1.DeleteOrgRequest]) (*connect.Response[v1.DeleteOrgResponse], error)
	AddAdminToOrg(context.Context, *connect.Request[v1.AddAdminToOrgRequest]) (*connect.Response[v1.AddAdminToOrgResponse], error)
	RemoveAdminFromOrg(context.Context, *connect.Request[v1.RemoveAdminFromOrgRequest]) (*connect.Response[v1.RemoveAdminFromOrgResponse], error)
	InviteEmailToOrg(context.Context, *connect.Request[v1.InviteEmailToOrgRequest]) (*connect.Response[v1.InviteEmailToOrgResponse], error)
	AcceptEmailInvite(context.Context, *connect.Request[v1.AcceptEmailInviteRequest]) (*connect.Response[v1.AcceptEmailInviteResponse], error)
	CreateServiceType(context.Context, *connect.Request[v1.CreateServiceTypeRequest]) (*connect.Response[v1.CreateServiceTypeResponse], error)
	UpdateServiceTypeStatus(context.Context, *connect.Request[v1.UpdateServiceTypeStatusRequest]) (*connect.Response[v1.UpdateServiceTypeStatusResponse], error)
	DeleteServiceType(context.Context, *connect.Request[v1.DeleteServiceTypeRequest]) (*connect.Response[v1.DeleteServiceTypeResponse], error)
}

// NewOrgServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOrgServiceHandler(svc OrgServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	orgServiceMethods := v1.File_org_v1_org_proto.Services().ByName("OrgService").Methods()
	orgServiceGetOrgHandler := connect.NewUnaryHandler(
		OrgServiceGetOrgProcedure,
		svc.GetOrg,
		connect.WithSchema(orgServiceMethods.ByName("GetOrg")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceGetOrgByIdHandler := connect.NewUnaryHandler(
		OrgServiceGetOrgByIdProcedure,
		svc.GetOrgById,
		connect.WithSchema(orgServiceMethods.ByName("GetOrgById")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceUpdateOrgHandler := connect.NewUnaryHandler(
		OrgServiceUpdateOrgProcedure,
		svc.UpdateOrg,
		connect.WithSchema(orgServiceMethods.ByName("UpdateOrg")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceSetOrgPaymentHandler := connect.NewUnaryHandler(
		OrgServiceSetOrgPaymentProcedure,
		svc.SetOrgPayment,
		connect.WithSchema(orgServiceMethods.ByName("SetOrgPayment")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceCreateOrgHandler := connect.NewUnaryHandler(
		OrgServiceCreateOrgProcedure,
		svc.CreateOrg,
		connect.WithSchema(orgServiceMethods.ByName("CreateOrg")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceDeleteOrgHandler := connect.NewUnaryHandler(
		OrgServiceDeleteOrgProcedure,
		svc.DeleteOrg,
		connect.WithSchema(orgServiceMethods.ByName("DeleteOrg")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceAddAdminToOrgHandler := connect.NewUnaryHandler(
		OrgServiceAddAdminToOrgProcedure,
		svc.AddAdminToOrg,
		connect.WithSchema(orgServiceMethods.ByName("AddAdminToOrg")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceRemoveAdminFromOrgHandler := connect.NewUnaryHandler(
		OrgServiceRemoveAdminFromOrgProcedure,
		svc.RemoveAdminFromOrg,
		connect.WithSchema(orgServiceMethods.ByName("RemoveAdminFromOrg")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceInviteEmailToOrgHandler := connect.NewUnaryHandler(
		OrgServiceInviteEmailToOrgProcedure,
		svc.InviteEmailToOrg,
		connect.WithSchema(orgServiceMethods.ByName("InviteEmailToOrg")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceAcceptEmailInviteHandler := connect.NewUnaryHandler(
		OrgServiceAcceptEmailInviteProcedure,
		svc.AcceptEmailInvite,
		connect.WithSchema(orgServiceMethods.ByName("AcceptEmailInvite")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceCreateServiceTypeHandler := connect.NewUnaryHandler(
		OrgServiceCreateServiceTypeProcedure,
		svc.CreateServiceType,
		connect.WithSchema(orgServiceMethods.ByName("CreateServiceType")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceUpdateServiceTypeStatusHandler := connect.NewUnaryHandler(
		OrgServiceUpdateServiceTypeStatusProcedure,
		svc.UpdateServiceTypeStatus,
		connect.WithSchema(orgServiceMethods.ByName("UpdateServiceTypeStatus")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceDeleteServiceTypeHandler := connect.NewUnaryHandler(
		OrgServiceDeleteServiceTypeProcedure,
		svc.DeleteServiceType,
		connect.WithSchema(orgServiceMethods.ByName("DeleteServiceType")),
		connect.WithHandlerOptions(opts...),
	)
	return "/org.v1.OrgService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OrgServiceGetOrgProcedure:
			orgServiceGetOrgHandler.ServeHTTP(w, r)
		case OrgServiceGetOrgByIdProcedure:
			orgServiceGetOrgByIdHandler.ServeHTTP(w, r)
		case OrgServiceUpdateOrgProcedure:
			orgServiceUpdateOrgHandler.ServeHTTP(w, r)
		case OrgServiceSetOrgPaymentProcedure:
			orgServiceSetOrgPaymentHandler.ServeHTTP(w, r)
		case OrgServiceCreateOrgProcedure:
			orgServiceCreateOrgHandler.ServeHTTP(w, r)
		case OrgServiceDeleteOrgProcedure:
			orgServiceDeleteOrgHandler.ServeHTTP(w, r)
		case OrgServiceAddAdminToOrgProcedure:
			orgServiceAddAdminToOrgHandler.ServeHTTP(w, r)
		case OrgServiceRemoveAdminFromOrgProcedure:
			orgServiceRemoveAdminFromOrgHandler.ServeHTTP(w, r)
		case OrgServiceInviteEmailToOrgProcedure:
			orgServiceInviteEmailToOrgHandler.ServeHTTP(w, r)
		case OrgServiceAcceptEmailInviteProcedure:
			orgServiceAcceptEmailInviteHandler.ServeHTTP(w, r)
		case OrgServiceCreateServiceTypeProcedure:
			orgServiceCreateServiceTypeHandler.ServeHTTP(w, r)
		case OrgServiceUpdateServiceTypeStatusProcedure:
			orgServiceUpdateServiceTypeStatusHandler.ServeHTTP(w, r)
		case OrgServiceDeleteServiceTypeProcedure:
			orgServiceDeleteServiceTypeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOrgServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOrgServiceHandler struct{}

func (UnimplementedOrgServiceHandler) GetOrg(context.Context, *connect.Request[v1.GetOrgRequest]) (*connect.Response[v1.GetOrgResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("org.v1.OrgService.GetOrg is not implemented"))
}

func (UnimplementedOrgServiceHandler) GetOrgById(context.Context, *connect.Request[v1.GetOrgByIdRequest]) (*connect.Response[v1.GetOrgByIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("org.v1.OrgService.GetOrgById is not implemented"))
}

func (UnimplementedOrgServiceHandler) UpdateOrg(context.Context, *connect.Request[v1.UpdateOrgRequest]) (*connect.Response[v1.UpdateOrgResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("org.v1.OrgService.UpdateOrg is not implemented"))
}

func (UnimplementedOrgServiceHandler) SetOrgPayment(context.Context, *connect.Request[v1.SetOrgPaymentRequest]) (*connect.Response[v1.SetOrgPaymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("org.v1.OrgService.SetOrgPayment is not implemented"))
}

func (UnimplementedOrgServiceHandler) CreateOrg(context.Context, *connect.Request[v1.CreateOrgRequest]) (*connect.Response[v1.CreateOrgResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("org.v1.OrgService.CreateOrg is not implemented"))
}

func (UnimplementedOrgServiceHandler) DeleteOrg(context.Context, *connect.Request[v1.DeleteOrgRequest]) (*connect.Response[v1.DeleteOrgResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("org.v1.OrgService.DeleteOrg is not implemented"))
}

func (UnimplementedOrgServiceHandler) AddAdminToOrg(context.Context, *connect.Request[v1.AddAdminToOrgRequest]) (*connect.Response[v1.AddAdminToOrgResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("org.v1.OrgService.AddAdminToOrg is not implemented"))
}

func (UnimplementedOrgServiceHandler) RemoveAdminFromOrg(context.Context, *connect.Request[v1.RemoveAdminFromOrgRequest]) (*connect.Response[v1.RemoveAdminFromOrgResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("org.v1.OrgService.RemoveAdminFromOrg is not implemented"))
}

func (UnimplementedOrgServiceHandler) InviteEmailToOrg(context.Context, *connect.Request[v1.InviteEmailToOrgRequest]) (*connect.Response[v1.InviteEmailToOrgResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("org.v1.OrgService.InviteEmailToOrg is not implemented"))
}

func (UnimplementedOrgServiceHandler) AcceptEmailInvite(context.Context, *connect.Request[v1.AcceptEmailInviteRequest]) (*connect.Response[v1.AcceptEmailInviteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("org.v1.OrgService.AcceptEmailInvite is not implemented"))
}

func (UnimplementedOrgServiceHandler) CreateServiceType(context.Context, *connect.Request[v1.CreateServiceTypeRequest]) (*connect.Response[v1.CreateServiceTypeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("org.v1.OrgService.CreateServiceType is not implemented"))
}

func (UnimplementedOrgServiceHandler) UpdateServiceTypeStatus(context.Context, *connect.Request[v1.UpdateServiceTypeStatusRequest]) (*connect.Response[v1.UpdateServiceTypeStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("org.v1.OrgService.UpdateServiceTypeStatus is not implemented"))
}

func (UnimplementedOrgServiceHandler) DeleteServiceType(context.Context, *connect.Request[v1.DeleteServiceTypeRequest]) (*connect.Response[v1.DeleteServiceTypeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("org.v1.OrgService.DeleteServiceType is not implemented"))
}
