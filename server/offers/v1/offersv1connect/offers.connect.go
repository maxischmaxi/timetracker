// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: offers/v1/offers.proto

package offersv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/maxischmaxi/ljtime-api/offers/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OffersServiceName is the fully-qualified name of the OffersService service.
	OffersServiceName = "offers.v1.OffersService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OffersServiceGetOffersByOrgIdProcedure is the fully-qualified name of the OffersService's
	// GetOffersByOrgId RPC.
	OffersServiceGetOffersByOrgIdProcedure = "/offers.v1.OffersService/GetOffersByOrgId"
	// OffersServiceGetOfferByIdProcedure is the fully-qualified name of the OffersService's
	// GetOfferById RPC.
	OffersServiceGetOfferByIdProcedure = "/offers.v1.OffersService/GetOfferById"
	// OffersServiceCreateEmptyOfferProcedure is the fully-qualified name of the OffersService's
	// CreateEmptyOffer RPC.
	OffersServiceCreateEmptyOfferProcedure = "/offers.v1.OffersService/CreateEmptyOffer"
	// OffersServiceCreateOfferProcedure is the fully-qualified name of the OffersService's CreateOffer
	// RPC.
	OffersServiceCreateOfferProcedure = "/offers.v1.OffersService/CreateOffer"
	// OffersServiceGetOffersByCustomerIdProcedure is the fully-qualified name of the OffersService's
	// GetOffersByCustomerId RPC.
	OffersServiceGetOffersByCustomerIdProcedure = "/offers.v1.OffersService/GetOffersByCustomerId"
	// OffersServiceGetOfferPdfProcedure is the fully-qualified name of the OffersService's GetOfferPdf
	// RPC.
	OffersServiceGetOfferPdfProcedure = "/offers.v1.OffersService/GetOfferPdf"
	// OffersServiceUpdateOfferProcedure is the fully-qualified name of the OffersService's UpdateOffer
	// RPC.
	OffersServiceUpdateOfferProcedure = "/offers.v1.OffersService/UpdateOffer"
	// OffersServiceDeleteOfferProcedure is the fully-qualified name of the OffersService's DeleteOffer
	// RPC.
	OffersServiceDeleteOfferProcedure = "/offers.v1.OffersService/DeleteOffer"
)

// OffersServiceClient is a client for the offers.v1.OffersService service.
type OffersServiceClient interface {
	GetOffersByOrgId(context.Context, *connect.Request[v1.GetOffersByOrgIdRequest]) (*connect.Response[v1.GetOffersByOrgIdResponse], error)
	GetOfferById(context.Context, *connect.Request[v1.GetOfferByIdRequest]) (*connect.Response[v1.GetOfferByIdResponse], error)
	CreateEmptyOffer(context.Context, *connect.Request[v1.CreateEmptyOfferRequest]) (*connect.Response[v1.CreateEmptyOfferResponse], error)
	CreateOffer(context.Context, *connect.Request[v1.CreateOfferRequest]) (*connect.Response[v1.CreateOfferResponse], error)
	GetOffersByCustomerId(context.Context, *connect.Request[v1.GetOffersByCustomerIdRequest]) (*connect.Response[v1.GetOffersByCustomerIdResponse], error)
	GetOfferPdf(context.Context, *connect.Request[v1.GetOfferPdfRequest]) (*connect.Response[v1.GetOfferPdfResponse], error)
	UpdateOffer(context.Context, *connect.Request[v1.UpdateOfferRequest]) (*connect.Response[v1.UpdateOfferResponse], error)
	DeleteOffer(context.Context, *connect.Request[v1.DeleteOfferRequest]) (*connect.Response[v1.DeleteOfferResponse], error)
}

// NewOffersServiceClient constructs a client for the offers.v1.OffersService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOffersServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OffersServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	offersServiceMethods := v1.File_offers_v1_offers_proto.Services().ByName("OffersService").Methods()
	return &offersServiceClient{
		getOffersByOrgId: connect.NewClient[v1.GetOffersByOrgIdRequest, v1.GetOffersByOrgIdResponse](
			httpClient,
			baseURL+OffersServiceGetOffersByOrgIdProcedure,
			connect.WithSchema(offersServiceMethods.ByName("GetOffersByOrgId")),
			connect.WithClientOptions(opts...),
		),
		getOfferById: connect.NewClient[v1.GetOfferByIdRequest, v1.GetOfferByIdResponse](
			httpClient,
			baseURL+OffersServiceGetOfferByIdProcedure,
			connect.WithSchema(offersServiceMethods.ByName("GetOfferById")),
			connect.WithClientOptions(opts...),
		),
		createEmptyOffer: connect.NewClient[v1.CreateEmptyOfferRequest, v1.CreateEmptyOfferResponse](
			httpClient,
			baseURL+OffersServiceCreateEmptyOfferProcedure,
			connect.WithSchema(offersServiceMethods.ByName("CreateEmptyOffer")),
			connect.WithClientOptions(opts...),
		),
		createOffer: connect.NewClient[v1.CreateOfferRequest, v1.CreateOfferResponse](
			httpClient,
			baseURL+OffersServiceCreateOfferProcedure,
			connect.WithSchema(offersServiceMethods.ByName("CreateOffer")),
			connect.WithClientOptions(opts...),
		),
		getOffersByCustomerId: connect.NewClient[v1.GetOffersByCustomerIdRequest, v1.GetOffersByCustomerIdResponse](
			httpClient,
			baseURL+OffersServiceGetOffersByCustomerIdProcedure,
			connect.WithSchema(offersServiceMethods.ByName("GetOffersByCustomerId")),
			connect.WithClientOptions(opts...),
		),
		getOfferPdf: connect.NewClient[v1.GetOfferPdfRequest, v1.GetOfferPdfResponse](
			httpClient,
			baseURL+OffersServiceGetOfferPdfProcedure,
			connect.WithSchema(offersServiceMethods.ByName("GetOfferPdf")),
			connect.WithClientOptions(opts...),
		),
		updateOffer: connect.NewClient[v1.UpdateOfferRequest, v1.UpdateOfferResponse](
			httpClient,
			baseURL+OffersServiceUpdateOfferProcedure,
			connect.WithSchema(offersServiceMethods.ByName("UpdateOffer")),
			connect.WithClientOptions(opts...),
		),
		deleteOffer: connect.NewClient[v1.DeleteOfferRequest, v1.DeleteOfferResponse](
			httpClient,
			baseURL+OffersServiceDeleteOfferProcedure,
			connect.WithSchema(offersServiceMethods.ByName("DeleteOffer")),
			connect.WithClientOptions(opts...),
		),
	}
}

// offersServiceClient implements OffersServiceClient.
type offersServiceClient struct {
	getOffersByOrgId      *connect.Client[v1.GetOffersByOrgIdRequest, v1.GetOffersByOrgIdResponse]
	getOfferById          *connect.Client[v1.GetOfferByIdRequest, v1.GetOfferByIdResponse]
	createEmptyOffer      *connect.Client[v1.CreateEmptyOfferRequest, v1.CreateEmptyOfferResponse]
	createOffer           *connect.Client[v1.CreateOfferRequest, v1.CreateOfferResponse]
	getOffersByCustomerId *connect.Client[v1.GetOffersByCustomerIdRequest, v1.GetOffersByCustomerIdResponse]
	getOfferPdf           *connect.Client[v1.GetOfferPdfRequest, v1.GetOfferPdfResponse]
	updateOffer           *connect.Client[v1.UpdateOfferRequest, v1.UpdateOfferResponse]
	deleteOffer           *connect.Client[v1.DeleteOfferRequest, v1.DeleteOfferResponse]
}

// GetOffersByOrgId calls offers.v1.OffersService.GetOffersByOrgId.
func (c *offersServiceClient) GetOffersByOrgId(ctx context.Context, req *connect.Request[v1.GetOffersByOrgIdRequest]) (*connect.Response[v1.GetOffersByOrgIdResponse], error) {
	return c.getOffersByOrgId.CallUnary(ctx, req)
}

// GetOfferById calls offers.v1.OffersService.GetOfferById.
func (c *offersServiceClient) GetOfferById(ctx context.Context, req *connect.Request[v1.GetOfferByIdRequest]) (*connect.Response[v1.GetOfferByIdResponse], error) {
	return c.getOfferById.CallUnary(ctx, req)
}

// CreateEmptyOffer calls offers.v1.OffersService.CreateEmptyOffer.
func (c *offersServiceClient) CreateEmptyOffer(ctx context.Context, req *connect.Request[v1.CreateEmptyOfferRequest]) (*connect.Response[v1.CreateEmptyOfferResponse], error) {
	return c.createEmptyOffer.CallUnary(ctx, req)
}

// CreateOffer calls offers.v1.OffersService.CreateOffer.
func (c *offersServiceClient) CreateOffer(ctx context.Context, req *connect.Request[v1.CreateOfferRequest]) (*connect.Response[v1.CreateOfferResponse], error) {
	return c.createOffer.CallUnary(ctx, req)
}

// GetOffersByCustomerId calls offers.v1.OffersService.GetOffersByCustomerId.
func (c *offersServiceClient) GetOffersByCustomerId(ctx context.Context, req *connect.Request[v1.GetOffersByCustomerIdRequest]) (*connect.Response[v1.GetOffersByCustomerIdResponse], error) {
	return c.getOffersByCustomerId.CallUnary(ctx, req)
}

// GetOfferPdf calls offers.v1.OffersService.GetOfferPdf.
func (c *offersServiceClient) GetOfferPdf(ctx context.Context, req *connect.Request[v1.GetOfferPdfRequest]) (*connect.Response[v1.GetOfferPdfResponse], error) {
	return c.getOfferPdf.CallUnary(ctx, req)
}

// UpdateOffer calls offers.v1.OffersService.UpdateOffer.
func (c *offersServiceClient) UpdateOffer(ctx context.Context, req *connect.Request[v1.UpdateOfferRequest]) (*connect.Response[v1.UpdateOfferResponse], error) {
	return c.updateOffer.CallUnary(ctx, req)
}

// DeleteOffer calls offers.v1.OffersService.DeleteOffer.
func (c *offersServiceClient) DeleteOffer(ctx context.Context, req *connect.Request[v1.DeleteOfferRequest]) (*connect.Response[v1.DeleteOfferResponse], error) {
	return c.deleteOffer.CallUnary(ctx, req)
}

// OffersServiceHandler is an implementation of the offers.v1.OffersService service.
type OffersServiceHandler interface {
	GetOffersByOrgId(context.Context, *connect.Request[v1.GetOffersByOrgIdRequest]) (*connect.Response[v1.GetOffersByOrgIdResponse], error)
	GetOfferById(context.Context, *connect.Request[v1.GetOfferByIdRequest]) (*connect.Response[v1.GetOfferByIdResponse], error)
	CreateEmptyOffer(context.Context, *connect.Request[v1.CreateEmptyOfferRequest]) (*connect.Response[v1.CreateEmptyOfferResponse], error)
	CreateOffer(context.Context, *connect.Request[v1.CreateOfferRequest]) (*connect.Response[v1.CreateOfferResponse], error)
	GetOffersByCustomerId(context.Context, *connect.Request[v1.GetOffersByCustomerIdRequest]) (*connect.Response[v1.GetOffersByCustomerIdResponse], error)
	GetOfferPdf(context.Context, *connect.Request[v1.GetOfferPdfRequest]) (*connect.Response[v1.GetOfferPdfResponse], error)
	UpdateOffer(context.Context, *connect.Request[v1.UpdateOfferRequest]) (*connect.Response[v1.UpdateOfferResponse], error)
	DeleteOffer(context.Context, *connect.Request[v1.DeleteOfferRequest]) (*connect.Response[v1.DeleteOfferResponse], error)
}

// NewOffersServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOffersServiceHandler(svc OffersServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	offersServiceMethods := v1.File_offers_v1_offers_proto.Services().ByName("OffersService").Methods()
	offersServiceGetOffersByOrgIdHandler := connect.NewUnaryHandler(
		OffersServiceGetOffersByOrgIdProcedure,
		svc.GetOffersByOrgId,
		connect.WithSchema(offersServiceMethods.ByName("GetOffersByOrgId")),
		connect.WithHandlerOptions(opts...),
	)
	offersServiceGetOfferByIdHandler := connect.NewUnaryHandler(
		OffersServiceGetOfferByIdProcedure,
		svc.GetOfferById,
		connect.WithSchema(offersServiceMethods.ByName("GetOfferById")),
		connect.WithHandlerOptions(opts...),
	)
	offersServiceCreateEmptyOfferHandler := connect.NewUnaryHandler(
		OffersServiceCreateEmptyOfferProcedure,
		svc.CreateEmptyOffer,
		connect.WithSchema(offersServiceMethods.ByName("CreateEmptyOffer")),
		connect.WithHandlerOptions(opts...),
	)
	offersServiceCreateOfferHandler := connect.NewUnaryHandler(
		OffersServiceCreateOfferProcedure,
		svc.CreateOffer,
		connect.WithSchema(offersServiceMethods.ByName("CreateOffer")),
		connect.WithHandlerOptions(opts...),
	)
	offersServiceGetOffersByCustomerIdHandler := connect.NewUnaryHandler(
		OffersServiceGetOffersByCustomerIdProcedure,
		svc.GetOffersByCustomerId,
		connect.WithSchema(offersServiceMethods.ByName("GetOffersByCustomerId")),
		connect.WithHandlerOptions(opts...),
	)
	offersServiceGetOfferPdfHandler := connect.NewUnaryHandler(
		OffersServiceGetOfferPdfProcedure,
		svc.GetOfferPdf,
		connect.WithSchema(offersServiceMethods.ByName("GetOfferPdf")),
		connect.WithHandlerOptions(opts...),
	)
	offersServiceUpdateOfferHandler := connect.NewUnaryHandler(
		OffersServiceUpdateOfferProcedure,
		svc.UpdateOffer,
		connect.WithSchema(offersServiceMethods.ByName("UpdateOffer")),
		connect.WithHandlerOptions(opts...),
	)
	offersServiceDeleteOfferHandler := connect.NewUnaryHandler(
		OffersServiceDeleteOfferProcedure,
		svc.DeleteOffer,
		connect.WithSchema(offersServiceMethods.ByName("DeleteOffer")),
		connect.WithHandlerOptions(opts...),
	)
	return "/offers.v1.OffersService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OffersServiceGetOffersByOrgIdProcedure:
			offersServiceGetOffersByOrgIdHandler.ServeHTTP(w, r)
		case OffersServiceGetOfferByIdProcedure:
			offersServiceGetOfferByIdHandler.ServeHTTP(w, r)
		case OffersServiceCreateEmptyOfferProcedure:
			offersServiceCreateEmptyOfferHandler.ServeHTTP(w, r)
		case OffersServiceCreateOfferProcedure:
			offersServiceCreateOfferHandler.ServeHTTP(w, r)
		case OffersServiceGetOffersByCustomerIdProcedure:
			offersServiceGetOffersByCustomerIdHandler.ServeHTTP(w, r)
		case OffersServiceGetOfferPdfProcedure:
			offersServiceGetOfferPdfHandler.ServeHTTP(w, r)
		case OffersServiceUpdateOfferProcedure:
			offersServiceUpdateOfferHandler.ServeHTTP(w, r)
		case OffersServiceDeleteOfferProcedure:
			offersServiceDeleteOfferHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOffersServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOffersServiceHandler struct{}

func (UnimplementedOffersServiceHandler) GetOffersByOrgId(context.Context, *connect.Request[v1.GetOffersByOrgIdRequest]) (*connect.Response[v1.GetOffersByOrgIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("offers.v1.OffersService.GetOffersByOrgId is not implemented"))
}

func (UnimplementedOffersServiceHandler) GetOfferById(context.Context, *connect.Request[v1.GetOfferByIdRequest]) (*connect.Response[v1.GetOfferByIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("offers.v1.OffersService.GetOfferById is not implemented"))
}

func (UnimplementedOffersServiceHandler) CreateEmptyOffer(context.Context, *connect.Request[v1.CreateEmptyOfferRequest]) (*connect.Response[v1.CreateEmptyOfferResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("offers.v1.OffersService.CreateEmptyOffer is not implemented"))
}

func (UnimplementedOffersServiceHandler) CreateOffer(context.Context, *connect.Request[v1.CreateOfferRequest]) (*connect.Response[v1.CreateOfferResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("offers.v1.OffersService.CreateOffer is not implemented"))
}

func (UnimplementedOffersServiceHandler) GetOffersByCustomerId(context.Context, *connect.Request[v1.GetOffersByCustomerIdRequest]) (*connect.Response[v1.GetOffersByCustomerIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("offers.v1.OffersService.GetOffersByCustomerId is not implemented"))
}

func (UnimplementedOffersServiceHandler) GetOfferPdf(context.Context, *connect.Request[v1.GetOfferPdfRequest]) (*connect.Response[v1.GetOfferPdfResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("offers.v1.OffersService.GetOfferPdf is not implemented"))
}

func (UnimplementedOffersServiceHandler) UpdateOffer(context.Context, *connect.Request[v1.UpdateOfferRequest]) (*connect.Response[v1.UpdateOfferResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("offers.v1.OffersService.UpdateOffer is not implemented"))
}

func (UnimplementedOffersServiceHandler) DeleteOffer(context.Context, *connect.Request[v1.DeleteOfferRequest]) (*connect.Response[v1.DeleteOfferResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("offers.v1.OffersService.DeleteOffer is not implemented"))
}
