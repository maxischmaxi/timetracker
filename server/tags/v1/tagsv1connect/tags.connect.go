// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: tags/v1/tags.proto

package tagsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/maxischmaxi/ljtime-api/tags/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TagsServiceName is the fully-qualified name of the TagsService service.
	TagsServiceName = "tags.v1.TagsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TagsServiceGetAllTagsProcedure is the fully-qualified name of the TagsService's GetAllTags RPC.
	TagsServiceGetAllTagsProcedure = "/tags.v1.TagsService/GetAllTags"
)

// TagsServiceClient is a client for the tags.v1.TagsService service.
type TagsServiceClient interface {
	GetAllTags(context.Context, *connect.Request[v1.GetAllTagsRequest]) (*connect.Response[v1.GetAllTagsResponse], error)
}

// NewTagsServiceClient constructs a client for the tags.v1.TagsService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTagsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TagsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	tagsServiceMethods := v1.File_tags_v1_tags_proto.Services().ByName("TagsService").Methods()
	return &tagsServiceClient{
		getAllTags: connect.NewClient[v1.GetAllTagsRequest, v1.GetAllTagsResponse](
			httpClient,
			baseURL+TagsServiceGetAllTagsProcedure,
			connect.WithSchema(tagsServiceMethods.ByName("GetAllTags")),
			connect.WithClientOptions(opts...),
		),
	}
}

// tagsServiceClient implements TagsServiceClient.
type tagsServiceClient struct {
	getAllTags *connect.Client[v1.GetAllTagsRequest, v1.GetAllTagsResponse]
}

// GetAllTags calls tags.v1.TagsService.GetAllTags.
func (c *tagsServiceClient) GetAllTags(ctx context.Context, req *connect.Request[v1.GetAllTagsRequest]) (*connect.Response[v1.GetAllTagsResponse], error) {
	return c.getAllTags.CallUnary(ctx, req)
}

// TagsServiceHandler is an implementation of the tags.v1.TagsService service.
type TagsServiceHandler interface {
	GetAllTags(context.Context, *connect.Request[v1.GetAllTagsRequest]) (*connect.Response[v1.GetAllTagsResponse], error)
}

// NewTagsServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTagsServiceHandler(svc TagsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tagsServiceMethods := v1.File_tags_v1_tags_proto.Services().ByName("TagsService").Methods()
	tagsServiceGetAllTagsHandler := connect.NewUnaryHandler(
		TagsServiceGetAllTagsProcedure,
		svc.GetAllTags,
		connect.WithSchema(tagsServiceMethods.ByName("GetAllTags")),
		connect.WithHandlerOptions(opts...),
	)
	return "/tags.v1.TagsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TagsServiceGetAllTagsProcedure:
			tagsServiceGetAllTagsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTagsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTagsServiceHandler struct{}

func (UnimplementedTagsServiceHandler) GetAllTags(context.Context, *connect.Request[v1.GetAllTagsRequest]) (*connect.Response[v1.GetAllTagsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tags.v1.TagsService.GetAllTags is not implemented"))
}
