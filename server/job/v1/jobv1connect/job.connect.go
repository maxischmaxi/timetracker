// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: job/v1/job.proto

package jobv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/maxischmaxi/ljtime-api/job/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// JobServiceName is the fully-qualified name of the JobService service.
	JobServiceName = "job.v1.JobService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// JobServiceGetJobProcedure is the fully-qualified name of the JobService's GetJob RPC.
	JobServiceGetJobProcedure = "/job.v1.JobService/GetJob"
	// JobServiceGetJobsProcedure is the fully-qualified name of the JobService's GetJobs RPC.
	JobServiceGetJobsProcedure = "/job.v1.JobService/GetJobs"
	// JobServiceCreateJobProcedure is the fully-qualified name of the JobService's CreateJob RPC.
	JobServiceCreateJobProcedure = "/job.v1.JobService/CreateJob"
	// JobServiceUpdateJobProcedure is the fully-qualified name of the JobService's UpdateJob RPC.
	JobServiceUpdateJobProcedure = "/job.v1.JobService/UpdateJob"
	// JobServiceDeleteJobProcedure is the fully-qualified name of the JobService's DeleteJob RPC.
	JobServiceDeleteJobProcedure = "/job.v1.JobService/DeleteJob"
	// JobServiceGetJobsByProjectProcedure is the fully-qualified name of the JobService's
	// GetJobsByProject RPC.
	JobServiceGetJobsByProjectProcedure = "/job.v1.JobService/GetJobsByProject"
	// JobServiceGetJobsByCustomerProcedure is the fully-qualified name of the JobService's
	// GetJobsByCustomer RPC.
	JobServiceGetJobsByCustomerProcedure = "/job.v1.JobService/GetJobsByCustomer"
	// JobServiceGetJobsByDateProcedure is the fully-qualified name of the JobService's GetJobsByDate
	// RPC.
	JobServiceGetJobsByDateProcedure = "/job.v1.JobService/GetJobsByDate"
)

// JobServiceClient is a client for the job.v1.JobService service.
type JobServiceClient interface {
	GetJob(context.Context, *connect.Request[v1.GetJobRequest]) (*connect.Response[v1.GetJobResponse], error)
	GetJobs(context.Context, *connect.Request[v1.GetJobsRequest]) (*connect.Response[v1.GetJobsResponse], error)
	CreateJob(context.Context, *connect.Request[v1.CreateJobRequest]) (*connect.Response[v1.CreateJobResponse], error)
	UpdateJob(context.Context, *connect.Request[v1.UpdateJobRequest]) (*connect.Response[v1.UpdateJobResponse], error)
	DeleteJob(context.Context, *connect.Request[v1.DeleteJobRequest]) (*connect.Response[v1.DeleteJobResponse], error)
	GetJobsByProject(context.Context, *connect.Request[v1.GetJobsByProjectRequest]) (*connect.Response[v1.GetJobsByProjectResponse], error)
	GetJobsByCustomer(context.Context, *connect.Request[v1.GetJobsByCustomerRequest]) (*connect.Response[v1.GetJobsByCustomerResponse], error)
	GetJobsByDate(context.Context, *connect.Request[v1.GetJobsByDateRequest]) (*connect.Response[v1.GetJobsByDateResponse], error)
}

// NewJobServiceClient constructs a client for the job.v1.JobService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewJobServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) JobServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	jobServiceMethods := v1.File_job_v1_job_proto.Services().ByName("JobService").Methods()
	return &jobServiceClient{
		getJob: connect.NewClient[v1.GetJobRequest, v1.GetJobResponse](
			httpClient,
			baseURL+JobServiceGetJobProcedure,
			connect.WithSchema(jobServiceMethods.ByName("GetJob")),
			connect.WithClientOptions(opts...),
		),
		getJobs: connect.NewClient[v1.GetJobsRequest, v1.GetJobsResponse](
			httpClient,
			baseURL+JobServiceGetJobsProcedure,
			connect.WithSchema(jobServiceMethods.ByName("GetJobs")),
			connect.WithClientOptions(opts...),
		),
		createJob: connect.NewClient[v1.CreateJobRequest, v1.CreateJobResponse](
			httpClient,
			baseURL+JobServiceCreateJobProcedure,
			connect.WithSchema(jobServiceMethods.ByName("CreateJob")),
			connect.WithClientOptions(opts...),
		),
		updateJob: connect.NewClient[v1.UpdateJobRequest, v1.UpdateJobResponse](
			httpClient,
			baseURL+JobServiceUpdateJobProcedure,
			connect.WithSchema(jobServiceMethods.ByName("UpdateJob")),
			connect.WithClientOptions(opts...),
		),
		deleteJob: connect.NewClient[v1.DeleteJobRequest, v1.DeleteJobResponse](
			httpClient,
			baseURL+JobServiceDeleteJobProcedure,
			connect.WithSchema(jobServiceMethods.ByName("DeleteJob")),
			connect.WithClientOptions(opts...),
		),
		getJobsByProject: connect.NewClient[v1.GetJobsByProjectRequest, v1.GetJobsByProjectResponse](
			httpClient,
			baseURL+JobServiceGetJobsByProjectProcedure,
			connect.WithSchema(jobServiceMethods.ByName("GetJobsByProject")),
			connect.WithClientOptions(opts...),
		),
		getJobsByCustomer: connect.NewClient[v1.GetJobsByCustomerRequest, v1.GetJobsByCustomerResponse](
			httpClient,
			baseURL+JobServiceGetJobsByCustomerProcedure,
			connect.WithSchema(jobServiceMethods.ByName("GetJobsByCustomer")),
			connect.WithClientOptions(opts...),
		),
		getJobsByDate: connect.NewClient[v1.GetJobsByDateRequest, v1.GetJobsByDateResponse](
			httpClient,
			baseURL+JobServiceGetJobsByDateProcedure,
			connect.WithSchema(jobServiceMethods.ByName("GetJobsByDate")),
			connect.WithClientOptions(opts...),
		),
	}
}

// jobServiceClient implements JobServiceClient.
type jobServiceClient struct {
	getJob            *connect.Client[v1.GetJobRequest, v1.GetJobResponse]
	getJobs           *connect.Client[v1.GetJobsRequest, v1.GetJobsResponse]
	createJob         *connect.Client[v1.CreateJobRequest, v1.CreateJobResponse]
	updateJob         *connect.Client[v1.UpdateJobRequest, v1.UpdateJobResponse]
	deleteJob         *connect.Client[v1.DeleteJobRequest, v1.DeleteJobResponse]
	getJobsByProject  *connect.Client[v1.GetJobsByProjectRequest, v1.GetJobsByProjectResponse]
	getJobsByCustomer *connect.Client[v1.GetJobsByCustomerRequest, v1.GetJobsByCustomerResponse]
	getJobsByDate     *connect.Client[v1.GetJobsByDateRequest, v1.GetJobsByDateResponse]
}

// GetJob calls job.v1.JobService.GetJob.
func (c *jobServiceClient) GetJob(ctx context.Context, req *connect.Request[v1.GetJobRequest]) (*connect.Response[v1.GetJobResponse], error) {
	return c.getJob.CallUnary(ctx, req)
}

// GetJobs calls job.v1.JobService.GetJobs.
func (c *jobServiceClient) GetJobs(ctx context.Context, req *connect.Request[v1.GetJobsRequest]) (*connect.Response[v1.GetJobsResponse], error) {
	return c.getJobs.CallUnary(ctx, req)
}

// CreateJob calls job.v1.JobService.CreateJob.
func (c *jobServiceClient) CreateJob(ctx context.Context, req *connect.Request[v1.CreateJobRequest]) (*connect.Response[v1.CreateJobResponse], error) {
	return c.createJob.CallUnary(ctx, req)
}

// UpdateJob calls job.v1.JobService.UpdateJob.
func (c *jobServiceClient) UpdateJob(ctx context.Context, req *connect.Request[v1.UpdateJobRequest]) (*connect.Response[v1.UpdateJobResponse], error) {
	return c.updateJob.CallUnary(ctx, req)
}

// DeleteJob calls job.v1.JobService.DeleteJob.
func (c *jobServiceClient) DeleteJob(ctx context.Context, req *connect.Request[v1.DeleteJobRequest]) (*connect.Response[v1.DeleteJobResponse], error) {
	return c.deleteJob.CallUnary(ctx, req)
}

// GetJobsByProject calls job.v1.JobService.GetJobsByProject.
func (c *jobServiceClient) GetJobsByProject(ctx context.Context, req *connect.Request[v1.GetJobsByProjectRequest]) (*connect.Response[v1.GetJobsByProjectResponse], error) {
	return c.getJobsByProject.CallUnary(ctx, req)
}

// GetJobsByCustomer calls job.v1.JobService.GetJobsByCustomer.
func (c *jobServiceClient) GetJobsByCustomer(ctx context.Context, req *connect.Request[v1.GetJobsByCustomerRequest]) (*connect.Response[v1.GetJobsByCustomerResponse], error) {
	return c.getJobsByCustomer.CallUnary(ctx, req)
}

// GetJobsByDate calls job.v1.JobService.GetJobsByDate.
func (c *jobServiceClient) GetJobsByDate(ctx context.Context, req *connect.Request[v1.GetJobsByDateRequest]) (*connect.Response[v1.GetJobsByDateResponse], error) {
	return c.getJobsByDate.CallUnary(ctx, req)
}

// JobServiceHandler is an implementation of the job.v1.JobService service.
type JobServiceHandler interface {
	GetJob(context.Context, *connect.Request[v1.GetJobRequest]) (*connect.Response[v1.GetJobResponse], error)
	GetJobs(context.Context, *connect.Request[v1.GetJobsRequest]) (*connect.Response[v1.GetJobsResponse], error)
	CreateJob(context.Context, *connect.Request[v1.CreateJobRequest]) (*connect.Response[v1.CreateJobResponse], error)
	UpdateJob(context.Context, *connect.Request[v1.UpdateJobRequest]) (*connect.Response[v1.UpdateJobResponse], error)
	DeleteJob(context.Context, *connect.Request[v1.DeleteJobRequest]) (*connect.Response[v1.DeleteJobResponse], error)
	GetJobsByProject(context.Context, *connect.Request[v1.GetJobsByProjectRequest]) (*connect.Response[v1.GetJobsByProjectResponse], error)
	GetJobsByCustomer(context.Context, *connect.Request[v1.GetJobsByCustomerRequest]) (*connect.Response[v1.GetJobsByCustomerResponse], error)
	GetJobsByDate(context.Context, *connect.Request[v1.GetJobsByDateRequest]) (*connect.Response[v1.GetJobsByDateResponse], error)
}

// NewJobServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewJobServiceHandler(svc JobServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	jobServiceMethods := v1.File_job_v1_job_proto.Services().ByName("JobService").Methods()
	jobServiceGetJobHandler := connect.NewUnaryHandler(
		JobServiceGetJobProcedure,
		svc.GetJob,
		connect.WithSchema(jobServiceMethods.ByName("GetJob")),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceGetJobsHandler := connect.NewUnaryHandler(
		JobServiceGetJobsProcedure,
		svc.GetJobs,
		connect.WithSchema(jobServiceMethods.ByName("GetJobs")),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceCreateJobHandler := connect.NewUnaryHandler(
		JobServiceCreateJobProcedure,
		svc.CreateJob,
		connect.WithSchema(jobServiceMethods.ByName("CreateJob")),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceUpdateJobHandler := connect.NewUnaryHandler(
		JobServiceUpdateJobProcedure,
		svc.UpdateJob,
		connect.WithSchema(jobServiceMethods.ByName("UpdateJob")),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceDeleteJobHandler := connect.NewUnaryHandler(
		JobServiceDeleteJobProcedure,
		svc.DeleteJob,
		connect.WithSchema(jobServiceMethods.ByName("DeleteJob")),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceGetJobsByProjectHandler := connect.NewUnaryHandler(
		JobServiceGetJobsByProjectProcedure,
		svc.GetJobsByProject,
		connect.WithSchema(jobServiceMethods.ByName("GetJobsByProject")),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceGetJobsByCustomerHandler := connect.NewUnaryHandler(
		JobServiceGetJobsByCustomerProcedure,
		svc.GetJobsByCustomer,
		connect.WithSchema(jobServiceMethods.ByName("GetJobsByCustomer")),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceGetJobsByDateHandler := connect.NewUnaryHandler(
		JobServiceGetJobsByDateProcedure,
		svc.GetJobsByDate,
		connect.WithSchema(jobServiceMethods.ByName("GetJobsByDate")),
		connect.WithHandlerOptions(opts...),
	)
	return "/job.v1.JobService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case JobServiceGetJobProcedure:
			jobServiceGetJobHandler.ServeHTTP(w, r)
		case JobServiceGetJobsProcedure:
			jobServiceGetJobsHandler.ServeHTTP(w, r)
		case JobServiceCreateJobProcedure:
			jobServiceCreateJobHandler.ServeHTTP(w, r)
		case JobServiceUpdateJobProcedure:
			jobServiceUpdateJobHandler.ServeHTTP(w, r)
		case JobServiceDeleteJobProcedure:
			jobServiceDeleteJobHandler.ServeHTTP(w, r)
		case JobServiceGetJobsByProjectProcedure:
			jobServiceGetJobsByProjectHandler.ServeHTTP(w, r)
		case JobServiceGetJobsByCustomerProcedure:
			jobServiceGetJobsByCustomerHandler.ServeHTTP(w, r)
		case JobServiceGetJobsByDateProcedure:
			jobServiceGetJobsByDateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedJobServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedJobServiceHandler struct{}

func (UnimplementedJobServiceHandler) GetJob(context.Context, *connect.Request[v1.GetJobRequest]) (*connect.Response[v1.GetJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("job.v1.JobService.GetJob is not implemented"))
}

func (UnimplementedJobServiceHandler) GetJobs(context.Context, *connect.Request[v1.GetJobsRequest]) (*connect.Response[v1.GetJobsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("job.v1.JobService.GetJobs is not implemented"))
}

func (UnimplementedJobServiceHandler) CreateJob(context.Context, *connect.Request[v1.CreateJobRequest]) (*connect.Response[v1.CreateJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("job.v1.JobService.CreateJob is not implemented"))
}

func (UnimplementedJobServiceHandler) UpdateJob(context.Context, *connect.Request[v1.UpdateJobRequest]) (*connect.Response[v1.UpdateJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("job.v1.JobService.UpdateJob is not implemented"))
}

func (UnimplementedJobServiceHandler) DeleteJob(context.Context, *connect.Request[v1.DeleteJobRequest]) (*connect.Response[v1.DeleteJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("job.v1.JobService.DeleteJob is not implemented"))
}

func (UnimplementedJobServiceHandler) GetJobsByProject(context.Context, *connect.Request[v1.GetJobsByProjectRequest]) (*connect.Response[v1.GetJobsByProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("job.v1.JobService.GetJobsByProject is not implemented"))
}

func (UnimplementedJobServiceHandler) GetJobsByCustomer(context.Context, *connect.Request[v1.GetJobsByCustomerRequest]) (*connect.Response[v1.GetJobsByCustomerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("job.v1.JobService.GetJobsByCustomer is not implemented"))
}

func (UnimplementedJobServiceHandler) GetJobsByDate(context.Context, *connect.Request[v1.GetJobsByDateRequest]) (*connect.Response[v1.GetJobsByDateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("job.v1.JobService.GetJobsByDate is not implemented"))
}
