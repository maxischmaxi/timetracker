// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: customer/v1/customer.proto

package customerv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/maxischmaxi/ljtime-api/customer/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CustomerServiceName is the fully-qualified name of the CustomerService service.
	CustomerServiceName = "customer.v1.CustomerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CustomerServiceGetCustomerProcedure is the fully-qualified name of the CustomerService's
	// GetCustomer RPC.
	CustomerServiceGetCustomerProcedure = "/customer.v1.CustomerService/GetCustomer"
	// CustomerServiceCreateCustomerProcedure is the fully-qualified name of the CustomerService's
	// CreateCustomer RPC.
	CustomerServiceCreateCustomerProcedure = "/customer.v1.CustomerService/CreateCustomer"
	// CustomerServiceUpdateCustomerProcedure is the fully-qualified name of the CustomerService's
	// UpdateCustomer RPC.
	CustomerServiceUpdateCustomerProcedure = "/customer.v1.CustomerService/UpdateCustomer"
	// CustomerServiceDeleteCustomerProcedure is the fully-qualified name of the CustomerService's
	// DeleteCustomer RPC.
	CustomerServiceDeleteCustomerProcedure = "/customer.v1.CustomerService/DeleteCustomer"
	// CustomerServiceGetCustomersProcedure is the fully-qualified name of the CustomerService's
	// GetCustomers RPC.
	CustomerServiceGetCustomersProcedure = "/customer.v1.CustomerService/GetCustomers"
	// CustomerServiceGetCustomersByOrgProcedure is the fully-qualified name of the CustomerService's
	// GetCustomersByOrg RPC.
	CustomerServiceGetCustomersByOrgProcedure = "/customer.v1.CustomerService/GetCustomersByOrg"
)

// CustomerServiceClient is a client for the customer.v1.CustomerService service.
type CustomerServiceClient interface {
	GetCustomer(context.Context, *connect.Request[v1.GetCustomerRequest]) (*connect.Response[v1.GetCustomerResponse], error)
	CreateCustomer(context.Context, *connect.Request[v1.CreateCustomerRequest]) (*connect.Response[v1.CreateCustomerResponse], error)
	UpdateCustomer(context.Context, *connect.Request[v1.UpdateCustomerRequest]) (*connect.Response[v1.UpdateCustomerResponse], error)
	DeleteCustomer(context.Context, *connect.Request[v1.DeleteCustomerRequest]) (*connect.Response[v1.DeleteCustomerResponse], error)
	GetCustomers(context.Context, *connect.Request[v1.GetCustomersRequest]) (*connect.Response[v1.GetCustomersResponse], error)
	GetCustomersByOrg(context.Context, *connect.Request[v1.GetCustomersByOrgRequest]) (*connect.Response[v1.GetCustomersByOrgResponse], error)
}

// NewCustomerServiceClient constructs a client for the customer.v1.CustomerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCustomerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CustomerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	customerServiceMethods := v1.File_customer_v1_customer_proto.Services().ByName("CustomerService").Methods()
	return &customerServiceClient{
		getCustomer: connect.NewClient[v1.GetCustomerRequest, v1.GetCustomerResponse](
			httpClient,
			baseURL+CustomerServiceGetCustomerProcedure,
			connect.WithSchema(customerServiceMethods.ByName("GetCustomer")),
			connect.WithClientOptions(opts...),
		),
		createCustomer: connect.NewClient[v1.CreateCustomerRequest, v1.CreateCustomerResponse](
			httpClient,
			baseURL+CustomerServiceCreateCustomerProcedure,
			connect.WithSchema(customerServiceMethods.ByName("CreateCustomer")),
			connect.WithClientOptions(opts...),
		),
		updateCustomer: connect.NewClient[v1.UpdateCustomerRequest, v1.UpdateCustomerResponse](
			httpClient,
			baseURL+CustomerServiceUpdateCustomerProcedure,
			connect.WithSchema(customerServiceMethods.ByName("UpdateCustomer")),
			connect.WithClientOptions(opts...),
		),
		deleteCustomer: connect.NewClient[v1.DeleteCustomerRequest, v1.DeleteCustomerResponse](
			httpClient,
			baseURL+CustomerServiceDeleteCustomerProcedure,
			connect.WithSchema(customerServiceMethods.ByName("DeleteCustomer")),
			connect.WithClientOptions(opts...),
		),
		getCustomers: connect.NewClient[v1.GetCustomersRequest, v1.GetCustomersResponse](
			httpClient,
			baseURL+CustomerServiceGetCustomersProcedure,
			connect.WithSchema(customerServiceMethods.ByName("GetCustomers")),
			connect.WithClientOptions(opts...),
		),
		getCustomersByOrg: connect.NewClient[v1.GetCustomersByOrgRequest, v1.GetCustomersByOrgResponse](
			httpClient,
			baseURL+CustomerServiceGetCustomersByOrgProcedure,
			connect.WithSchema(customerServiceMethods.ByName("GetCustomersByOrg")),
			connect.WithClientOptions(opts...),
		),
	}
}

// customerServiceClient implements CustomerServiceClient.
type customerServiceClient struct {
	getCustomer       *connect.Client[v1.GetCustomerRequest, v1.GetCustomerResponse]
	createCustomer    *connect.Client[v1.CreateCustomerRequest, v1.CreateCustomerResponse]
	updateCustomer    *connect.Client[v1.UpdateCustomerRequest, v1.UpdateCustomerResponse]
	deleteCustomer    *connect.Client[v1.DeleteCustomerRequest, v1.DeleteCustomerResponse]
	getCustomers      *connect.Client[v1.GetCustomersRequest, v1.GetCustomersResponse]
	getCustomersByOrg *connect.Client[v1.GetCustomersByOrgRequest, v1.GetCustomersByOrgResponse]
}

// GetCustomer calls customer.v1.CustomerService.GetCustomer.
func (c *customerServiceClient) GetCustomer(ctx context.Context, req *connect.Request[v1.GetCustomerRequest]) (*connect.Response[v1.GetCustomerResponse], error) {
	return c.getCustomer.CallUnary(ctx, req)
}

// CreateCustomer calls customer.v1.CustomerService.CreateCustomer.
func (c *customerServiceClient) CreateCustomer(ctx context.Context, req *connect.Request[v1.CreateCustomerRequest]) (*connect.Response[v1.CreateCustomerResponse], error) {
	return c.createCustomer.CallUnary(ctx, req)
}

// UpdateCustomer calls customer.v1.CustomerService.UpdateCustomer.
func (c *customerServiceClient) UpdateCustomer(ctx context.Context, req *connect.Request[v1.UpdateCustomerRequest]) (*connect.Response[v1.UpdateCustomerResponse], error) {
	return c.updateCustomer.CallUnary(ctx, req)
}

// DeleteCustomer calls customer.v1.CustomerService.DeleteCustomer.
func (c *customerServiceClient) DeleteCustomer(ctx context.Context, req *connect.Request[v1.DeleteCustomerRequest]) (*connect.Response[v1.DeleteCustomerResponse], error) {
	return c.deleteCustomer.CallUnary(ctx, req)
}

// GetCustomers calls customer.v1.CustomerService.GetCustomers.
func (c *customerServiceClient) GetCustomers(ctx context.Context, req *connect.Request[v1.GetCustomersRequest]) (*connect.Response[v1.GetCustomersResponse], error) {
	return c.getCustomers.CallUnary(ctx, req)
}

// GetCustomersByOrg calls customer.v1.CustomerService.GetCustomersByOrg.
func (c *customerServiceClient) GetCustomersByOrg(ctx context.Context, req *connect.Request[v1.GetCustomersByOrgRequest]) (*connect.Response[v1.GetCustomersByOrgResponse], error) {
	return c.getCustomersByOrg.CallUnary(ctx, req)
}

// CustomerServiceHandler is an implementation of the customer.v1.CustomerService service.
type CustomerServiceHandler interface {
	GetCustomer(context.Context, *connect.Request[v1.GetCustomerRequest]) (*connect.Response[v1.GetCustomerResponse], error)
	CreateCustomer(context.Context, *connect.Request[v1.CreateCustomerRequest]) (*connect.Response[v1.CreateCustomerResponse], error)
	UpdateCustomer(context.Context, *connect.Request[v1.UpdateCustomerRequest]) (*connect.Response[v1.UpdateCustomerResponse], error)
	DeleteCustomer(context.Context, *connect.Request[v1.DeleteCustomerRequest]) (*connect.Response[v1.DeleteCustomerResponse], error)
	GetCustomers(context.Context, *connect.Request[v1.GetCustomersRequest]) (*connect.Response[v1.GetCustomersResponse], error)
	GetCustomersByOrg(context.Context, *connect.Request[v1.GetCustomersByOrgRequest]) (*connect.Response[v1.GetCustomersByOrgResponse], error)
}

// NewCustomerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCustomerServiceHandler(svc CustomerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	customerServiceMethods := v1.File_customer_v1_customer_proto.Services().ByName("CustomerService").Methods()
	customerServiceGetCustomerHandler := connect.NewUnaryHandler(
		CustomerServiceGetCustomerProcedure,
		svc.GetCustomer,
		connect.WithSchema(customerServiceMethods.ByName("GetCustomer")),
		connect.WithHandlerOptions(opts...),
	)
	customerServiceCreateCustomerHandler := connect.NewUnaryHandler(
		CustomerServiceCreateCustomerProcedure,
		svc.CreateCustomer,
		connect.WithSchema(customerServiceMethods.ByName("CreateCustomer")),
		connect.WithHandlerOptions(opts...),
	)
	customerServiceUpdateCustomerHandler := connect.NewUnaryHandler(
		CustomerServiceUpdateCustomerProcedure,
		svc.UpdateCustomer,
		connect.WithSchema(customerServiceMethods.ByName("UpdateCustomer")),
		connect.WithHandlerOptions(opts...),
	)
	customerServiceDeleteCustomerHandler := connect.NewUnaryHandler(
		CustomerServiceDeleteCustomerProcedure,
		svc.DeleteCustomer,
		connect.WithSchema(customerServiceMethods.ByName("DeleteCustomer")),
		connect.WithHandlerOptions(opts...),
	)
	customerServiceGetCustomersHandler := connect.NewUnaryHandler(
		CustomerServiceGetCustomersProcedure,
		svc.GetCustomers,
		connect.WithSchema(customerServiceMethods.ByName("GetCustomers")),
		connect.WithHandlerOptions(opts...),
	)
	customerServiceGetCustomersByOrgHandler := connect.NewUnaryHandler(
		CustomerServiceGetCustomersByOrgProcedure,
		svc.GetCustomersByOrg,
		connect.WithSchema(customerServiceMethods.ByName("GetCustomersByOrg")),
		connect.WithHandlerOptions(opts...),
	)
	return "/customer.v1.CustomerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CustomerServiceGetCustomerProcedure:
			customerServiceGetCustomerHandler.ServeHTTP(w, r)
		case CustomerServiceCreateCustomerProcedure:
			customerServiceCreateCustomerHandler.ServeHTTP(w, r)
		case CustomerServiceUpdateCustomerProcedure:
			customerServiceUpdateCustomerHandler.ServeHTTP(w, r)
		case CustomerServiceDeleteCustomerProcedure:
			customerServiceDeleteCustomerHandler.ServeHTTP(w, r)
		case CustomerServiceGetCustomersProcedure:
			customerServiceGetCustomersHandler.ServeHTTP(w, r)
		case CustomerServiceGetCustomersByOrgProcedure:
			customerServiceGetCustomersByOrgHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCustomerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCustomerServiceHandler struct{}

func (UnimplementedCustomerServiceHandler) GetCustomer(context.Context, *connect.Request[v1.GetCustomerRequest]) (*connect.Response[v1.GetCustomerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("customer.v1.CustomerService.GetCustomer is not implemented"))
}

func (UnimplementedCustomerServiceHandler) CreateCustomer(context.Context, *connect.Request[v1.CreateCustomerRequest]) (*connect.Response[v1.CreateCustomerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("customer.v1.CustomerService.CreateCustomer is not implemented"))
}

func (UnimplementedCustomerServiceHandler) UpdateCustomer(context.Context, *connect.Request[v1.UpdateCustomerRequest]) (*connect.Response[v1.UpdateCustomerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("customer.v1.CustomerService.UpdateCustomer is not implemented"))
}

func (UnimplementedCustomerServiceHandler) DeleteCustomer(context.Context, *connect.Request[v1.DeleteCustomerRequest]) (*connect.Response[v1.DeleteCustomerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("customer.v1.CustomerService.DeleteCustomer is not implemented"))
}

func (UnimplementedCustomerServiceHandler) GetCustomers(context.Context, *connect.Request[v1.GetCustomersRequest]) (*connect.Response[v1.GetCustomersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("customer.v1.CustomerService.GetCustomers is not implemented"))
}

func (UnimplementedCustomerServiceHandler) GetCustomersByOrg(context.Context, *connect.Request[v1.GetCustomersByOrgRequest]) (*connect.Response[v1.GetCustomersByOrgResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("customer.v1.CustomerService.GetCustomersByOrg is not implemented"))
}
